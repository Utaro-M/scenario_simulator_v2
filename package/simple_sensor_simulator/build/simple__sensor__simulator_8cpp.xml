<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="simple__sensor__simulator_8cpp" kind="file" language="C++">
    <compoundname>simple_sensor_simulator.cpp</compoundname>
    <includes local="no">quaternion_operation/quaternion_operation.h</includes>
    <includes local="no">geometry_msgs/msg/pose_stamped.hpp</includes>
    <includes local="no">limits</includes>
    <includes local="no">memory</includes>
    <includes local="no">rclcpp/rclcpp.hpp</includes>
    <includes local="no">rclcpp_components/register_node_macro.hpp</includes>
    <includes refid="exception_8hpp" local="no">simple_sensor_simulator/exception.hpp</includes>
    <includes refid="simple__sensor__simulator_8hpp" local="no">simple_sensor_simulator/simple_sensor_simulator.hpp</includes>
    <includes local="no">simulation_interface/conversions.hpp</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="241">
        <label>simulation_interface/conversions.hpp</label>
      </node>
      <node id="207">
        <label>limits</label>
      </node>
      <node id="206">
        <label>geometry_msgs/msg/pose_stamped.hpp</label>
      </node>
      <node id="218">
        <label>simple_sensor_simulator/sensor_simulation/lidar/lidar_sensor.hpp</label>
        <link refid="lidar__sensor_8hpp_source"/>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="220" relation="include">
        </childnode>
        <childnode refid="221" relation="include">
        </childnode>
        <childnode refid="222" relation="include">
        </childnode>
      </node>
      <node id="226">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="216">
        <label>geometry_msgs/msg/transform_stamped.hpp</label>
      </node>
      <node id="212">
        <label>stdexcept</label>
      </node>
      <node id="236">
        <label>autoware_perception_msgs/msg/dynamic_object_array.hpp</label>
      </node>
      <node id="213">
        <label>simple_sensor_simulator/simple_sensor_simulator.hpp</label>
        <link refid="simple__sensor__simulator_8hpp_source"/>
        <childnode refid="214" relation="include">
        </childnode>
        <childnode refid="215" relation="include">
        </childnode>
        <childnode refid="206" relation="include">
        </childnode>
        <childnode refid="216" relation="include">
        </childnode>
        <childnode refid="217" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="223" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="221" relation="include">
        </childnode>
        <childnode refid="239" relation="include">
        </childnode>
        <childnode refid="222" relation="include">
        </childnode>
        <childnode refid="240" relation="include">
        </childnode>
      </node>
      <node id="221">
        <label>string</label>
      </node>
      <node id="217">
        <label>map</label>
      </node>
      <node id="209">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="220">
        <label>sensor_msgs/msg/point_cloud2.hpp</label>
      </node>
      <node id="224">
        <label>embree3/rtcore.h</label>
      </node>
      <node id="238">
        <label>simulation_interface/zmq_server.hpp</label>
      </node>
      <node id="227">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="210">
        <label>rclcpp_components/register_node_macro.hpp</label>
      </node>
      <node id="228">
        <label>random</label>
      </node>
      <node id="205">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="237">
        <label>simulation_interface/zmq_multi_server.hpp</label>
      </node>
      <node id="230">
        <label>simple_sensor_simulator/sensor_simulation/primitives/primitive.hpp</label>
        <link refid="primitive_8hpp_source"/>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="221" relation="include">
        </childnode>
        <childnode refid="222" relation="include">
        </childnode>
      </node>
      <node id="229">
        <label>simple_sensor_simulator/sensor_simulation/primitives/box.hpp</label>
        <link refid="box_8hpp_source"/>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
      </node>
      <node id="222">
        <label>vector</label>
      </node>
      <node id="235">
        <label>simple_sensor_simulator/sensor_simulation/detection_sensor/detection_sensor.hpp</label>
        <link refid="detection__sensor_8hpp_source"/>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="221" relation="include">
        </childnode>
        <childnode refid="222" relation="include">
        </childnode>
      </node>
      <node id="233">
        <label>utility</label>
      </node>
      <node id="223">
        <label>simple_sensor_simulator/sensor_simulation/lidar/raycaster.hpp</label>
        <link refid="raycaster_8hpp_source"/>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="225" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="220" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="221" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="222" relation="include">
        </childnode>
      </node>
      <node id="204">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/simple_sensor_simulator/src/simple_sensor_simulator.cpp</label>
        <link refid="simple__sensor__simulator_8cpp"/>
        <childnode refid="205" relation="include">
        </childnode>
        <childnode refid="206" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="210" relation="include">
        </childnode>
        <childnode refid="211" relation="include">
        </childnode>
        <childnode refid="213" relation="include">
        </childnode>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="221" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="222" relation="include">
        </childnode>
      </node>
      <node id="232">
        <label>unordered_map</label>
      </node>
      <node id="214">
        <label>tf2/LinearMath/Quaternion.h</label>
      </node>
      <node id="240">
        <label>visualization_msgs/msg/marker_array.hpp</label>
      </node>
      <node id="215">
        <label>tf2_ros/transform_broadcaster.h</label>
      </node>
      <node id="239">
        <label>thread</label>
      </node>
      <node id="211">
        <label>simple_sensor_simulator/exception.hpp</label>
        <link refid="exception_8hpp_source"/>
        <childnode refid="212" relation="include">
        </childnode>
      </node>
      <node id="231">
        <label>algorithm</label>
      </node>
      <node id="225">
        <label>pcl_conversions/pcl_conversions.h</label>
      </node>
      <node id="234">
        <label>simple_sensor_simulator/sensor_simulation/sensor_simulation.hpp</label>
        <link refid="sensor__simulation_8hpp_source"/>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="222" relation="include">
        </childnode>
      </node>
      <node id="219">
        <label>simulation_api_schema.pb.h</label>
      </node>
      <node id="208">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacesimple__sensor__simulator">simple_sensor_simulator</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;quaternion_operation/quaternion_operation.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;geometry_msgs/msg/pose_stamped.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;rclcpp/rclcpp.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;rclcpp_components/register_node_macro.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;simple_sensor_simulator/exception.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;simple_sensor_simulator/simple_sensor_simulator.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;simulation_interface/conversions.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesimple__sensor__simulator" kindref="compound">simple_sensor_simulator</ref></highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal">ScenarioSimulator::ScenarioSimulator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rclcpp::NodeOptions<sp/>&amp;<sp/>options)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">:<sp/>Node(</highlight><highlight class="stringliteral">&quot;simple_sensor_simulator&quot;</highlight><highlight class="normal">,<sp/>options),</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>sensor_sim_(),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>server_(</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_interface::protocol,<sp/>simulation_interface::HostName::ANY,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::bind(&amp;ScenarioSimulator::initialize,<sp/>this,<sp/>std::placeholders::_1,<sp/>std::placeholders::_2),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>std::bind(&amp;ScenarioSimulator::updateFrame,<sp/>this,<sp/>std::placeholders::_1,<sp/>std::placeholders::_2),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>std::bind(</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ScenarioSimulator::updateSensorFrame,<sp/>this,<sp/>std::placeholders::_1,<sp/>std::placeholders::_2),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>std::bind(</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ScenarioSimulator::spawnVehicleEntity,<sp/>this,<sp/>std::placeholders::_1,<sp/>std::placeholders::_2),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>std::bind(</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ScenarioSimulator::spawnPedestrianEntity,<sp/>this,<sp/>std::placeholders::_1,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::placeholders::_2),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>std::bind(</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ScenarioSimulator::spawnMiscObjectEntity,<sp/>this,<sp/>std::placeholders::_1,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::placeholders::_2),</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::bind(</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ScenarioSimulator::despawnEntity,<sp/>this,<sp/>std::placeholders::_1,<sp/>std::placeholders::_2),</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>std::bind(</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ScenarioSimulator::updateEntityStatus,<sp/>this,<sp/>std::placeholders::_1,<sp/>std::placeholders::_2),</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>std::bind(</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ScenarioSimulator::attachLidarSensor,<sp/>this,<sp/>std::placeholders::_1,<sp/>std::placeholders::_2),</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>std::bind(</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ScenarioSimulator::attachDetectionSensor,<sp/>this,<sp/>std::placeholders::_1,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::placeholders::_2),</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::bind(</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ScenarioSimulator::updateTrafficLights,<sp/>this,<sp/>std::placeholders::_1,<sp/>std::placeholders::_2))</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">ScenarioSimulator::~ScenarioSimulator()<sp/>{}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScenarioSimulator::initialize(</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>simulation_api_schema::InitializeRequest<sp/>&amp;<sp/>req,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>simulation_api_schema::InitializeResponse<sp/>&amp;<sp/>res)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>initialized_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>realtime_factor_<sp/>=<sp/>req.realtime_factor();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>step_time_<sp/>=<sp/>req.step_time();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>simulation_api_schema::InitializeResponse();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>res.mutable_result()-&gt;set_success(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>res.mutable_result()-&gt;set_description(</highlight><highlight class="stringliteral">&quot;succeed<sp/>to<sp/>initialize<sp/>simulation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>ego_vehicles_<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>vehicles_<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>pedestrians_<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScenarioSimulator::updateFrame(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>simulation_api_schema::UpdateFrameRequest<sp/>&amp;<sp/>req,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>simulation_api_schema::UpdateFrameResponse<sp/>&amp;<sp/>res)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>simulation_api_schema::UpdateFrameResponse();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized_)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>res.mutable_result()-&gt;set_description(</highlight><highlight class="stringliteral">&quot;simulator<sp/>have<sp/>not<sp/>initialized<sp/>yet.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>res.mutable_result()-&gt;set_success(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>current_time_<sp/>=<sp/>req.current_time();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>builtin_interfaces::msg::Time<sp/>t;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>simulation_interface::toMsg(req.current_ros_time(),<sp/>t);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>current_ros_time_<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>res.mutable_result()-&gt;set_success(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>res.mutable_result()-&gt;set_description(</highlight><highlight class="stringliteral">&quot;succeed<sp/>to<sp/>update<sp/>frame&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScenarioSimulator::updateEntityStatus(</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>simulation_api_schema::UpdateEntityStatusRequest<sp/>&amp;<sp/>req,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>simulation_api_schema::UpdateEntityStatusResponse<sp/>&amp;<sp/>res)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>entity_status_<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>proto<sp/>:<sp/>req.status())<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>entity_status_.emplace_back(proto);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>simulation_api_schema::UpdateEntityStatusResponse();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>res.mutable_result()-&gt;set_success(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>res.mutable_result()-&gt;set_description(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScenarioSimulator::spawnVehicleEntity(</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>simulation_api_schema::SpawnVehicleEntityRequest<sp/>&amp;<sp/>req,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>simulation_api_schema::SpawnVehicleEntityResponse<sp/>&amp;<sp/>res)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ego_vehicles_.size()<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>req.is_ego())<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>SimulationRuntimeError(</highlight><highlight class="stringliteral">&quot;multi<sp/>ego<sp/>does<sp/>not<sp/>support&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req.is_ego())<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>ego_vehicles_.emplace_back(req.parameters());</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>vehicles_.emplace_back(req.parameters());</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>simulation_api_schema::SpawnVehicleEntityResponse();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>res.mutable_result()-&gt;set_success(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>res.mutable_result()-&gt;set_description(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScenarioSimulator::spawnPedestrianEntity(</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>simulation_api_schema::SpawnPedestrianEntityRequest<sp/>&amp;<sp/>req,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>simulation_api_schema::SpawnPedestrianEntityResponse<sp/>&amp;<sp/>res)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>pedestrians_.emplace_back(req.parameters());</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>simulation_api_schema::SpawnPedestrianEntityResponse();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>res.mutable_result()-&gt;set_success(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>res.mutable_result()-&gt;set_description(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScenarioSimulator::spawnMiscObjectEntity(</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>simulation_api_schema::SpawnMiscObjectEntityRequest<sp/>&amp;<sp/>req,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>simulation_api_schema::SpawnMiscObjectEntityResponse<sp/>&amp;<sp/>res)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>misc_objects_.emplace_back(req.parameters());</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>simulation_api_schema::SpawnMiscObjectEntityResponse();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>res.mutable_result()-&gt;set_success(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>res.mutable_result()-&gt;set_description(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScenarioSimulator::despawnEntity(</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>simulation_api_schema::DespawnEntityRequest<sp/>&amp;<sp/>req,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>simulation_api_schema::DespawnEntityResponse<sp/>&amp;<sp/>res)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>simulation_api_schema::DespawnEntityResponse();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>std::vector&lt;openscenario_msgs::VehicleParameters&gt;<sp/>vehicles;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vehicle<sp/>:<sp/>vehicles_)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vehicle.name()<sp/>!=<sp/>req.name())<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vehicles.emplace_back(vehicle);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>vehicles_<sp/>=<sp/>vehicles;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>std::vector&lt;openscenario_msgs::PedestrianParameters&gt;<sp/>pedestrians;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pedestrian<sp/>:<sp/>pedestrians_)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pedestrian.name()<sp/>!=<sp/>req.name())<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pedestrians.emplace_back(pedestrian);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>pedestrians_<sp/>=<sp/>pedestrians;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>std::vector&lt;openscenario_msgs::MiscObjectParameters&gt;<sp/>misc_objects;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>misc_object<sp/>:<sp/>misc_objects_)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(misc_object.name()<sp/>!=<sp/>req.name())<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>misc_objects.emplace_back(misc_object);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>misc_objects_<sp/>=<sp/>misc_objects;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>res.mutable_result()-&gt;set_success(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>res.mutable_result()-&gt;set_success(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScenarioSimulator::attachDetectionSensor(</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>simulation_api_schema::AttachDetectionSensorRequest<sp/>&amp;<sp/>req,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>simulation_api_schema::AttachDetectionSensorResponse<sp/>&amp;<sp/>res)</highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pub<sp/>=<sp/>this-&gt;create_publisher&lt;autoware_perception_msgs::msg::DynamicObjectArray&gt;(</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>req.configuration().topic_name(),<sp/>1);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>sensor_sim_.attachDetectionSensor(current_time_,<sp/>req.configuration(),<sp/>pub);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>simulation_api_schema::AttachDetectionSensorResponse();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>res.mutable_result()-&gt;set_success(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScenarioSimulator::attachLidarSensor(</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>simulation_api_schema::AttachLidarSensorRequest<sp/>&amp;<sp/>req,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>simulation_api_schema::AttachLidarSensorResponse<sp/>&amp;<sp/>res)</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pub<sp/>=</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;create_publisher&lt;sensor_msgs::msg::PointCloud2&gt;(req.configuration().topic_name(),<sp/>1);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>sensor_sim_.attachLidarSensor(current_time_,<sp/>req.configuration(),<sp/>pub);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>simulation_api_schema::AttachLidarSensorResponse();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>res.mutable_result()-&gt;set_success(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScenarioSimulator::updateSensorFrame(</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>simulation_api_schema::UpdateSensorFrameRequest<sp/>&amp;<sp/>req,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>simulation_api_schema::UpdateSensorFrameResponse<sp/>&amp;<sp/>res)</highlight></codeline>
<codeline lineno="212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>std::numeric_limits&lt;double&gt;::epsilon();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(req.current_time()<sp/>-<sp/>current_time_)<sp/>&gt;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>res.mutable_result()-&gt;set_success(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>res.mutable_result()-&gt;set_description(</highlight><highlight class="stringliteral">&quot;timestamp<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>builtin_interfaces::msg::Time<sp/>t;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>simulation_interface::toMsg(req.current_ros_time(),<sp/>t);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>current_ros_time_<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>sensor_sim_.updateSensorFrame(current_time_,<sp/>current_ros_time_,<sp/>entity_status_);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>simulation_api_schema::UpdateSensorFrameResponse();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>res.mutable_result()-&gt;set_success(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScenarioSimulator::updateTrafficLights(</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>simulation_api_schema::UpdateTrafficLightsRequest<sp/>&amp;<sp/>req,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>simulation_api_schema::UpdateTrafficLightsResponse<sp/>&amp;<sp/>res)</highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>handle<sp/>traffic<sp/>lights<sp/>in<sp/>simple<sp/>simulator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>(void)req;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>simulation_api_schema::UpdateTrafficLightsResponse();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>res.mutable_result()-&gt;set_success(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>simple_sensor_simulator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">RCLCPP_COMPONENTS_REGISTER_NODE(<ref refid="classsimple__sensor__simulator_1_1ScenarioSimulator" kindref="compound">simple_sensor_simulator::ScenarioSimulator</ref>)</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/simple_sensor_simulator/src/simple_sensor_simulator.cpp"/>
  </compounddef>
</doxygen>
