<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="test__traffic__light_8cpp" kind="file" language="C++">
    <compoundname>test_traffic_light.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes local="no">regex</includes>
    <includes local="no">scenario_simulator_exception/exception.hpp</includes>
    <includes refid="traffic__light_8hpp" local="no">traffic_simulator/traffic_lights/traffic_light.hpp</includes>
    <includes refid="expect__eq__macros_8hpp" local="yes">../expect_eq_macros.hpp</includes>
    <incdepgraph>
      <node id="7376">
        <label>scenario_simulator_exception/exception.hpp</label>
      </node>
      <node id="7426">
        <label>traffic_simulator/traffic_lights/traffic_light_state.hpp</label>
        <link refid="traffic__light__state_8hpp_source"/>
        <childnode refid="7427" relation="include">
        </childnode>
        <childnode refid="7379" relation="include">
        </childnode>
        <childnode refid="7381" relation="include">
        </childnode>
      </node>
      <node id="7380">
        <label>limits</label>
      </node>
      <node id="7406">
        <label>geometry_msgs/msg/pose_stamped.hpp</label>
      </node>
      <node id="7386">
        <label>std_msgs/msg/color_rgba.hpp</label>
      </node>
      <node id="7405">
        <label>geographic_msgs/msg/geo_point.hpp</label>
      </node>
      <node id="7397">
        <label>lanelet2_routing/RoutingGraph.h</label>
      </node>
      <node id="7388">
        <label>traffic_simulator/traffic_lights/traffic_light_phase.hpp</label>
        <link refid="traffic__light__phase_8hpp_source"/>
        <childnode refid="7380" relation="include">
        </childnode>
        <childnode refid="7376" relation="include">
        </childnode>
        <childnode refid="7389" relation="include">
        </childnode>
        <childnode refid="7424" relation="include">
        </childnode>
        <childnode refid="7423" relation="include">
        </childnode>
      </node>
      <node id="7392">
        <label>lanelet2_core/geometry/Lanelet.h</label>
      </node>
      <node id="7411">
        <label>openscenario_msgs/msg/entity_status.hpp</label>
      </node>
      <node id="7427">
        <label>autoware_perception_msgs/msg/lamp_state.hpp</label>
      </node>
      <node id="7420">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="7383">
        <label>cassert</label>
      </node>
      <node id="7381">
        <label>stdexcept</label>
      </node>
      <node id="7387">
        <label>string</label>
      </node>
      <node id="7409">
        <label>lanelet2_extension_psim/utility/utilities.hpp</label>
      </node>
      <node id="7413">
        <label>traffic_simulator/hdmap_utils/cache.hpp</label>
        <link refid="cache_8hpp_source"/>
        <childnode refid="7404" relation="include">
        </childnode>
        <childnode refid="7414" relation="include">
        </childnode>
        <childnode refid="7415" relation="include">
        </childnode>
        <childnode refid="7376" relation="include">
        </childnode>
        <childnode refid="7416" relation="include">
        </childnode>
        <childnode refid="7425" relation="include">
        </childnode>
        <childnode refid="7423" relation="include">
        </childnode>
      </node>
      <node id="7385">
        <label>map</label>
      </node>
      <node id="7418">
        <label>traffic_simulator/math/hermite_curve.hpp</label>
        <link refid="hermite__curve_8hpp_source"/>
        <childnode refid="7374" relation="include">
        </childnode>
        <childnode refid="7419" relation="include">
        </childnode>
        <childnode refid="7404" relation="include">
        </childnode>
        <childnode refid="7414" relation="include">
        </childnode>
        <childnode refid="7420" relation="include">
        </childnode>
        <childnode refid="7421" relation="include">
        </childnode>
        <childnode refid="7422" relation="include">
        </childnode>
        <childnode refid="7423" relation="include">
        </childnode>
      </node>
      <node id="7382">
        <label>traffic_simulator/color_utils/color_utils.hpp</label>
        <link refid="color__utils_8hpp_source"/>
        <childnode refid="7383" relation="include">
        </childnode>
        <childnode refid="7384" relation="include">
        </childnode>
        <childnode refid="7385" relation="include">
        </childnode>
        <childnode refid="7386" relation="include">
        </childnode>
        <childnode refid="7387" relation="include">
        </childnode>
      </node>
      <node id="7375">
        <label>regex</label>
      </node>
      <node id="7412">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="7396">
        <label>lanelet2_routing/RoutingCost.h</label>
      </node>
      <node id="7401">
        <label>tf2_geometry_msgs/tf2_geometry_msgs.h</label>
      </node>
      <node id="7389">
        <label>traffic_simulator/hdmap_utils/hdmap_utils.hpp</label>
        <link refid="hdmap__utils_8hpp_source"/>
        <childnode refid="7390" relation="include">
        </childnode>
        <childnode refid="7391" relation="include">
        </childnode>
        <childnode refid="7392" relation="include">
        </childnode>
        <childnode refid="7393" relation="include">
        </childnode>
        <childnode refid="7394" relation="include">
        </childnode>
        <childnode refid="7395" relation="include">
        </childnode>
        <childnode refid="7396" relation="include">
        </childnode>
        <childnode refid="7397" relation="include">
        </childnode>
        <childnode refid="7398" relation="include">
        </childnode>
        <childnode refid="7399" relation="include">
        </childnode>
        <childnode refid="7400" relation="include">
        </childnode>
        <childnode refid="7401" relation="include">
        </childnode>
        <childnode refid="7402" relation="include">
        </childnode>
        <childnode refid="7403" relation="include">
        </childnode>
        <childnode refid="7404" relation="include">
        </childnode>
        <childnode refid="7405" relation="include">
        </childnode>
        <childnode refid="7406" relation="include">
        </childnode>
        <childnode refid="7407" relation="include">
        </childnode>
        <childnode refid="7408" relation="include">
        </childnode>
        <childnode refid="7409" relation="include">
        </childnode>
        <childnode refid="7385" relation="include">
        </childnode>
        <childnode refid="7410" relation="include">
        </childnode>
        <childnode refid="7411" relation="include">
        </childnode>
        <childnode refid="7412" relation="include">
        </childnode>
        <childnode refid="7387" relation="include">
        </childnode>
        <childnode refid="7413" relation="include">
        </childnode>
        <childnode refid="7418" relation="include">
        </childnode>
        <childnode refid="7426" relation="include">
        </childnode>
        <childnode refid="7425" relation="include">
        </childnode>
        <childnode refid="7424" relation="include">
        </childnode>
        <childnode refid="7423" relation="include">
        </childnode>
        <childnode refid="7428" relation="include">
        </childnode>
      </node>
      <node id="7417">
        <label>exception</label>
      </node>
      <node id="7390">
        <label>geometry_msgs/msg/vector3.h</label>
      </node>
      <node id="7421">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="7378">
        <label>autoware_perception_msgs/msg/traffic_light_state.hpp</label>
      </node>
      <node id="7395">
        <label>lanelet2_routing/Route.h</label>
      </node>
      <node id="7408">
        <label>lanelet2_extension_psim/utility/query.hpp</label>
      </node>
      <node id="7373">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp</label>
        <link refid="test__traffic__light_8cpp"/>
        <childnode refid="7374" relation="include">
        </childnode>
        <childnode refid="7375" relation="include">
        </childnode>
        <childnode refid="7376" relation="include">
        </childnode>
        <childnode refid="7377" relation="include">
        </childnode>
        <childnode refid="7429" relation="include">
        </childnode>
      </node>
      <node id="7419">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="7407">
        <label>lanelet2_extension_psim/utility/message_conversion.hpp</label>
      </node>
      <node id="7414">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="7384">
        <label>cstdio</label>
      </node>
      <node id="7423">
        <label>vector</label>
      </node>
      <node id="7403">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="7374">
        <label>gtest/gtest.h</label>
      </node>
      <node id="7424">
        <label>utility</label>
      </node>
      <node id="7422">
        <label>traffic_simulator/math/polynomial_solver.hpp</label>
        <link refid="polynomial__solver_8hpp_source"/>
        <childnode refid="7423" relation="include">
        </childnode>
      </node>
      <node id="7399">
        <label>lanelet2_traffic_rules/TrafficRulesFactory.h</label>
      </node>
      <node id="7416">
        <label>traffic_simulator/math/catmull_rom_spline.hpp</label>
        <link refid="catmull__rom__spline_8hpp_source"/>
        <childnode refid="7417" relation="include">
        </childnode>
        <childnode refid="7414" relation="include">
        </childnode>
        <childnode refid="7387" relation="include">
        </childnode>
        <childnode refid="7418" relation="include">
        </childnode>
        <childnode refid="7424" relation="include">
        </childnode>
        <childnode refid="7423" relation="include">
        </childnode>
      </node>
      <node id="7394">
        <label>lanelet2_core/primitives/LaneletSequence.h</label>
      </node>
      <node id="7379">
        <label>iostream</label>
      </node>
      <node id="7391">
        <label>lanelet2_core/LaneletMap.h</label>
      </node>
      <node id="7425">
        <label>unordered_map</label>
      </node>
      <node id="7377">
        <label>traffic_simulator/traffic_lights/traffic_light.hpp</label>
        <link refid="traffic__light_8hpp_source"/>
        <childnode refid="7378" relation="include">
        </childnode>
        <childnode refid="7379" relation="include">
        </childnode>
        <childnode refid="7380" relation="include">
        </childnode>
        <childnode refid="7381" relation="include">
        </childnode>
        <childnode refid="7382" relation="include">
        </childnode>
        <childnode refid="7388" relation="include">
        </childnode>
        <childnode refid="7426" relation="include">
        </childnode>
        <childnode refid="7425" relation="include">
        </childnode>
        <childnode refid="7424" relation="include">
        </childnode>
        <childnode refid="7423" relation="include">
        </childnode>
      </node>
      <node id="7402">
        <label>autoware_auto_msgs/msg/had_map_bin.hpp</label>
      </node>
      <node id="7428">
        <label>visualization_msgs/msg/marker_array.hpp</label>
      </node>
      <node id="7415">
        <label>mutex</label>
      </node>
      <node id="7393">
        <label>lanelet2_core/primitives/BasicRegulatoryElements.h</label>
      </node>
      <node id="7398">
        <label>lanelet2_routing/RoutingGraphContainer.h</label>
      </node>
      <node id="7404">
        <label>boost/optional.hpp</label>
      </node>
      <node id="7400">
        <label>tf2/LinearMath/Matrix3x3.h</label>
      </node>
      <node id="7429">
        <label>../expect_eq_macros.hpp</label>
        <link refid="expect__eq__macros_8hpp_source"/>
        <childnode refid="7374" relation="include">
        </childnode>
        <childnode refid="7414" relation="include">
        </childnode>
      </node>
      <node id="7410">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__traffic__light_8cpp_1a8671ced8b607ba479cc36b7737343c0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>geometry_msgs::msg::Point</type>
        <definition>geometry_msgs::msg::Point getPoint</definition>
        <argsstring>(double val)</argsstring>
        <name>getPoint</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp" line="23" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp" bodystart="23" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="test__traffic__light_8cpp_1a6201c07eea67cf0503e353db906683b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TrafficLights, getPositionError)</argsstring>
        <name>TEST</name>
        <param>
          <type>TrafficLights</type>
        </param>
        <param>
          <type>getPositionError</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp" line="32" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp" bodystart="32" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="test__traffic__light_8cpp_1a495e130de1caad8af99eaf62b6fb41af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TrafficLights, getColorPosition)</argsstring>
        <name>TEST</name>
        <param>
          <type>TrafficLights</type>
        </param>
        <param>
          <type>getColorPosition</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp" line="53" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp" bodystart="53" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="test__traffic__light_8cpp_1ae706e8ac1b65a49967e71774649b5682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TrafficLights, getArrowPosition)</argsstring>
        <name>TEST</name>
        <param>
          <type>TrafficLights</type>
        </param>
        <param>
          <type>getArrowPosition</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp" line="77" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp" bodystart="77" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="test__traffic__light_8cpp_1a331ad68cb175a0d719c1fc6b90135844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TrafficLights, getColorAndArrowPosition)</argsstring>
        <name>TEST</name>
        <param>
          <type>TrafficLights</type>
        </param>
        <param>
          <type>getColorAndArrowPosition</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp" line="100" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp" bodystart="100" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="test__traffic__light_8cpp_1a7877cde1a2ed774fd30fdbfd086d7218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TrafficLights, setColorPhase)</argsstring>
        <name>TEST</name>
        <param>
          <type>TrafficLights</type>
        </param>
        <param>
          <type>setColorPhase</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp" line="126" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp" bodystart="126" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="test__traffic__light_8cpp_1af7bbf03284c7264408abb5e6cf8c040d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(TrafficLights, setColorAndArrowPhase)</argsstring>
        <name>TEST</name>
        <param>
          <type>TrafficLights</type>
        </param>
        <param>
          <type>setColorAndArrowPhase</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp" line="172" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp" bodystart="172" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="test__traffic__light_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp" line="226" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp" bodystart="226" bodyend="230"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;regex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;scenario_simulator_exception/exception.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/traffic_lights/traffic_light.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../expect_eq_macros.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">geometry_msgs::msg::Point<sp/>getPoint(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>p.x<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>p.y<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>p.z<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">TEST(TrafficLights,<sp/>getPositionError)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1TrafficLight" kindref="compound">traffic_simulator::TrafficLight</ref><sp/>light(0);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightColor::NONE),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightColor::GREEN),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightColor::YELLOW),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>EXPECT_THROW(light.getPosition(traffic_simulator::TrafficLightColor::RED),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightArrow::NONE),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightArrow::LEFT),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightArrow::RIGHT),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightArrow::STRAIGHT),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.id,<sp/>static_cast&lt;std::int64_t&gt;(0));</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">TEST(TrafficLights,<sp/>getColorPosition)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;traffic_simulator::TrafficLightColor,<sp/>geometry_msgs::msg::Point&gt;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>color_positions;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>color_positions[traffic_simulator::TrafficLightColor::GREEN]<sp/>=<sp/>getPoint(0);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>color_positions[traffic_simulator::TrafficLightColor::YELLOW]<sp/>=<sp/>getPoint(1);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>color_positions[traffic_simulator::TrafficLightColor::RED]<sp/>=<sp/>getPoint(2);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1TrafficLight" kindref="compound">traffic_simulator::TrafficLight</ref><sp/>light(0,<sp/>color_positions);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightColor::NONE),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>EXPECT_POINT_EQ(light.getPosition(traffic_simulator::TrafficLightColor::GREEN),<sp/>getPoint(0));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>EXPECT_POINT_EQ(light.getPosition(traffic_simulator::TrafficLightColor::YELLOW),<sp/>getPoint(1));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>EXPECT_POINT_EQ(light.getPosition(traffic_simulator::TrafficLightColor::RED),<sp/>getPoint(2));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightArrow::NONE),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightArrow::LEFT),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightArrow::RIGHT),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightArrow::STRAIGHT),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.id,<sp/>static_cast&lt;std::int64_t&gt;(0));</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">TEST(TrafficLights,<sp/>getArrowPosition)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;traffic_simulator::TrafficLightArrow,<sp/>geometry_msgs::msg::Point&gt;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>arrow_positions;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>arrow_positions[traffic_simulator::TrafficLightArrow::STRAIGHT]<sp/>=<sp/>getPoint(0);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>arrow_positions[traffic_simulator::TrafficLightArrow::LEFT]<sp/>=<sp/>getPoint(1);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>arrow_positions[traffic_simulator::TrafficLightArrow::RIGHT]<sp/>=<sp/>getPoint(2);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1TrafficLight" kindref="compound">traffic_simulator::TrafficLight</ref><sp/>light(1,<sp/>{},<sp/>arrow_positions);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightArrow::NONE),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>EXPECT_POINT_EQ(light.getPosition(traffic_simulator::TrafficLightArrow::STRAIGHT),<sp/>getPoint(0));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>EXPECT_POINT_EQ(light.getPosition(traffic_simulator::TrafficLightArrow::LEFT),<sp/>getPoint(1));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>EXPECT_POINT_EQ(light.getPosition(traffic_simulator::TrafficLightArrow::RIGHT),<sp/>getPoint(2));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightColor::NONE),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightColor::GREEN),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightColor::YELLOW),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>EXPECT_THROW(light.getPosition(traffic_simulator::TrafficLightColor::RED),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.id,<sp/>static_cast&lt;std::int64_t&gt;(1));</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">TEST(TrafficLights,<sp/>getColorAndArrowPosition)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;traffic_simulator::TrafficLightColor,<sp/>geometry_msgs::msg::Point&gt;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>color_positions;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>color_positions[traffic_simulator::TrafficLightColor::GREEN]<sp/>=<sp/>getPoint(0);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>color_positions[traffic_simulator::TrafficLightColor::YELLOW]<sp/>=<sp/>getPoint(1);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>color_positions[traffic_simulator::TrafficLightColor::RED]<sp/>=<sp/>getPoint(2);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;traffic_simulator::TrafficLightArrow,<sp/>geometry_msgs::msg::Point&gt;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>arrow_positions;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>arrow_positions[traffic_simulator::TrafficLightArrow::STRAIGHT]<sp/>=<sp/>getPoint(3);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>arrow_positions[traffic_simulator::TrafficLightArrow::LEFT]<sp/>=<sp/>getPoint(4);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>arrow_positions[traffic_simulator::TrafficLightArrow::RIGHT]<sp/>=<sp/>getPoint(5);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1TrafficLight" kindref="compound">traffic_simulator::TrafficLight</ref><sp/>light(0,<sp/>color_positions,<sp/>arrow_positions);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightArrow::NONE),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>EXPECT_POINT_EQ(light.getPosition(traffic_simulator::TrafficLightArrow::STRAIGHT),<sp/>getPoint(3));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>EXPECT_POINT_EQ(light.getPosition(traffic_simulator::TrafficLightArrow::LEFT),<sp/>getPoint(4));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>EXPECT_POINT_EQ(light.getPosition(traffic_simulator::TrafficLightArrow::RIGHT),<sp/>getPoint(5));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>EXPECT_THROW(</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>light.getPosition(traffic_simulator::TrafficLightColor::NONE),<sp/>common::SemanticError);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>EXPECT_POINT_EQ(light.getPosition(traffic_simulator::TrafficLightColor::GREEN),<sp/>getPoint(0));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>EXPECT_POINT_EQ(light.getPosition(traffic_simulator::TrafficLightColor::YELLOW),<sp/>getPoint(1));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>EXPECT_POINT_EQ(light.getPosition(traffic_simulator::TrafficLightColor::RED),<sp/>getPoint(2));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.id,<sp/>static_cast&lt;std::int64_t&gt;(0));</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">TEST(TrafficLights,<sp/>setColorPhase)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;traffic_simulator::TrafficLightColor,<sp/>geometry_msgs::msg::Point&gt;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>color_positions;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>color_positions[traffic_simulator::TrafficLightColor::GREEN]<sp/>=<sp/>getPoint(0);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>color_positions[traffic_simulator::TrafficLightColor::YELLOW]<sp/>=<sp/>getPoint(1);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>color_positions[traffic_simulator::TrafficLightColor::RED]<sp/>=<sp/>getPoint(2);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;traffic_simulator::TrafficLightArrow,<sp/>geometry_msgs::msg::Point&gt;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>arrow_positions;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>arrow_positions[traffic_simulator::TrafficLightArrow::STRAIGHT]<sp/>=<sp/>getPoint(3);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>arrow_positions[traffic_simulator::TrafficLightArrow::LEFT]<sp/>=<sp/>getPoint(4);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>arrow_positions[traffic_simulator::TrafficLightArrow::RIGHT]<sp/>=<sp/>getPoint(5);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1TrafficLight" kindref="compound">traffic_simulator::TrafficLight</ref><sp/>light(302120,<sp/>color_positions,<sp/>arrow_positions);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;double,<sp/>traffic_simulator::TrafficLightColor&gt;<sp/>&gt;<sp/>color_phases;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>color_phases.emplace_back(std::make_pair&lt;double,<sp/>traffic_simulator::TrafficLightColor&gt;(</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>10,<sp/>traffic_simulator::TrafficLightColor::RED));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>color_phases.emplace_back(std::make_pair&lt;double,<sp/>traffic_simulator::TrafficLightColor&gt;(</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>10,<sp/>traffic_simulator::TrafficLightColor::GREEN));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>color_phases.emplace_back(std::make_pair&lt;double,<sp/>traffic_simulator::TrafficLightColor&gt;(</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>10,<sp/>traffic_simulator::TrafficLightColor::YELLOW));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>light.setColorPhase(color_phases);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(light.getColorPhaseDuration(),<sp/>30);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(light.getArrowPhaseDuration(),<sp/>std::numeric_limits&lt;double&gt;::infinity());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.id,<sp/>static_cast&lt;std::int64_t&gt;(302120));</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getColor(),<sp/>traffic_simulator::TrafficLightColor::RED);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getArrow(),<sp/>traffic_simulator::TrafficLightArrow::NONE);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>light.update(10);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getColor(),<sp/>traffic_simulator::TrafficLightColor::GREEN);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getArrow(),<sp/>traffic_simulator::TrafficLightArrow::NONE);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>light.update(10);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getColor(),<sp/>traffic_simulator::TrafficLightColor::YELLOW);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getArrow(),<sp/>traffic_simulator::TrafficLightArrow::NONE);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>light.update(10);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getColor(),<sp/>traffic_simulator::TrafficLightColor::RED);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getArrow(),<sp/>traffic_simulator::TrafficLightArrow::NONE);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>light.update(10);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getColor(),<sp/>traffic_simulator::TrafficLightColor::GREEN);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getArrow(),<sp/>traffic_simulator::TrafficLightArrow::NONE);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>light.update(10);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getColor(),<sp/>traffic_simulator::TrafficLightColor::YELLOW);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getArrow(),<sp/>traffic_simulator::TrafficLightArrow::NONE);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>light.update(10);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getColor(),<sp/>traffic_simulator::TrafficLightColor::RED);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getArrow(),<sp/>traffic_simulator::TrafficLightArrow::NONE);</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">TEST(TrafficLights,<sp/>setColorAndArrowPhase)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;traffic_simulator::TrafficLightColor,<sp/>geometry_msgs::msg::Point&gt;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>color_positions;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>color_positions[traffic_simulator::TrafficLightColor::GREEN]<sp/>=<sp/>getPoint(0);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>color_positions[traffic_simulator::TrafficLightColor::YELLOW]<sp/>=<sp/>getPoint(1);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>color_positions[traffic_simulator::TrafficLightColor::RED]<sp/>=<sp/>getPoint(2);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;traffic_simulator::TrafficLightArrow,<sp/>geometry_msgs::msg::Point&gt;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>arrow_positions;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>arrow_positions[traffic_simulator::TrafficLightArrow::STRAIGHT]<sp/>=<sp/>getPoint(3);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>arrow_positions[traffic_simulator::TrafficLightArrow::LEFT]<sp/>=<sp/>getPoint(4);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>arrow_positions[traffic_simulator::TrafficLightArrow::RIGHT]<sp/>=<sp/>getPoint(5);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1TrafficLight" kindref="compound">traffic_simulator::TrafficLight</ref><sp/>light(302120,<sp/>color_positions,<sp/>arrow_positions);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;double,<sp/>traffic_simulator::TrafficLightColor&gt;<sp/>&gt;<sp/>color_phases;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>color_phases.emplace_back(std::make_pair&lt;double,<sp/>traffic_simulator::TrafficLightColor&gt;(</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>10,<sp/>traffic_simulator::TrafficLightColor::RED));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>color_phases.emplace_back(std::make_pair&lt;double,<sp/>traffic_simulator::TrafficLightColor&gt;(</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>10,<sp/>traffic_simulator::TrafficLightColor::GREEN));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>color_phases.emplace_back(std::make_pair&lt;double,<sp/>traffic_simulator::TrafficLightColor&gt;(</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>10,<sp/>traffic_simulator::TrafficLightColor::YELLOW));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>light.setColorPhase(color_phases);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;double,<sp/>traffic_simulator::TrafficLightArrow&gt;<sp/>&gt;<sp/>arrow_phases;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>arrow_phases.emplace_back(std::make_pair&lt;double,<sp/>traffic_simulator::TrafficLightArrow&gt;(</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>5,<sp/>traffic_simulator::TrafficLightArrow::STRAIGHT));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>arrow_phases.emplace_back(std::make_pair&lt;double,<sp/>traffic_simulator::TrafficLightArrow&gt;(</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>5,<sp/>traffic_simulator::TrafficLightArrow::LEFT));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>arrow_phases.emplace_back(std::make_pair&lt;double,<sp/>traffic_simulator::TrafficLightArrow&gt;(</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>5,<sp/>traffic_simulator::TrafficLightArrow::RIGHT));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>light.setArrowPhase(arrow_phases);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(light.getColorPhaseDuration(),<sp/>30);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(light.getArrowPhaseDuration(),<sp/>15);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.id,<sp/>static_cast&lt;std::int64_t&gt;(302120));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getColor(),<sp/>traffic_simulator::TrafficLightColor::RED);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getArrow(),<sp/>traffic_simulator::TrafficLightArrow::STRAIGHT);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>light.update(10);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getColor(),<sp/>traffic_simulator::TrafficLightColor::GREEN);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getArrow(),<sp/>traffic_simulator::TrafficLightArrow::RIGHT);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>light.update(10);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getColor(),<sp/>traffic_simulator::TrafficLightColor::YELLOW);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getArrow(),<sp/>traffic_simulator::TrafficLightArrow::LEFT);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>light.update(10);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getColor(),<sp/>traffic_simulator::TrafficLightColor::RED);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getArrow(),<sp/>traffic_simulator::TrafficLightArrow::STRAIGHT);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>light.update(10);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getColor(),<sp/>traffic_simulator::TrafficLightColor::GREEN);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getArrow(),<sp/>traffic_simulator::TrafficLightArrow::RIGHT);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>light.update(10);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getColor(),<sp/>traffic_simulator::TrafficLightColor::YELLOW);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getArrow(),<sp/>traffic_simulator::TrafficLightArrow::LEFT);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>light.update(10);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getColor(),<sp/>traffic_simulator::TrafficLightColor::RED);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>EXPECT_EQ(light.getArrow(),<sp/>traffic_simulator::TrafficLightArrow::STRAIGHT);</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>argv)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/traffic_lights/test_traffic_light.cpp"/>
  </compounddef>
</doxygen>
