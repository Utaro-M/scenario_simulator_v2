<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="test__linear__algebra_8cpp" kind="file" language="C++">
    <compoundname>test_linear_algebra.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes refid="linear__algebra_8hpp" local="no">traffic_simulator/math/linear_algebra.hpp</includes>
    <includes refid="expect__eq__macros_8hpp" local="yes">../expect_eq_macros.hpp</includes>
    <incdepgraph>
      <node id="7631">
        <label>scenario_simulator_exception/exception.hpp</label>
      </node>
      <node id="7630">
        <label>limits</label>
      </node>
      <node id="7626">
        <label>traffic_simulator/math/linear_algebra.hpp</label>
        <link refid="linear__algebra_8hpp_source"/>
        <childnode refid="7627" relation="include">
        </childnode>
        <childnode refid="7628" relation="include">
        </childnode>
        <childnode refid="7629" relation="include">
        </childnode>
        <childnode refid="7630" relation="include">
        </childnode>
        <childnode refid="7631" relation="include">
        </childnode>
      </node>
      <node id="7629">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="7628">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="7625">
        <label>gtest/gtest.h</label>
      </node>
      <node id="7627">
        <label>math.h</label>
      </node>
      <node id="7624">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_linear_algebra.cpp</label>
        <link refid="test__linear__algebra_8cpp"/>
        <childnode refid="7625" relation="include">
        </childnode>
        <childnode refid="7626" relation="include">
        </childnode>
        <childnode refid="7632" relation="include">
        </childnode>
      </node>
      <node id="7632">
        <label>../expect_eq_macros.hpp</label>
        <link refid="expect__eq__macros_8hpp_source"/>
        <childnode refid="7625" relation="include">
        </childnode>
        <childnode refid="7628" relation="include">
        </childnode>
        <childnode refid="7629" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__linear__algebra_8cpp_1ab5d55d056f9da1aeefddb72fc3cac97f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LINEAR_ALGEBRA, GET_SIZE)</argsstring>
        <name>TEST</name>
        <param>
          <type>LINEAR_ALGEBRA</type>
        </param>
        <param>
          <type>GET_SIZE</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_linear_algebra.cpp" line="21" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_linear_algebra.cpp" bodystart="21" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="test__linear__algebra_8cpp_1aeadb07253d47e35e9d4eff06c57481f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LINEAR_ALGEBRA, NORMALIZE)</argsstring>
        <name>TEST</name>
        <param>
          <type>LINEAR_ALGEBRA</type>
        </param>
        <param>
          <type>NORMALIZE</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_linear_algebra.cpp" line="31" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_linear_algebra.cpp" bodystart="31" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="test__linear__algebra_8cpp_1a5874f058979c50cb98fcb74f3928d753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LINEAR_ALGEBRA, MULTIPLY)</argsstring>
        <name>TEST</name>
        <param>
          <type>LINEAR_ALGEBRA</type>
        </param>
        <param>
          <type>MULTIPLY</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_linear_algebra.cpp" line="45" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_linear_algebra.cpp" bodystart="45" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="test__linear__algebra_8cpp_1a3feb8a0a1eb44adc72631cd53f5821bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LINEAR_ALGEBRA, ADDITION)</argsstring>
        <name>TEST</name>
        <param>
          <type>LINEAR_ALGEBRA</type>
        </param>
        <param>
          <type>ADDITION</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_linear_algebra.cpp" line="54" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_linear_algebra.cpp" bodystart="54" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="test__linear__algebra_8cpp_1a3af5160da2a466837dc89a8c71cf776a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LINEAR_ALGEBRA, SUBTRACTION)</argsstring>
        <name>TEST</name>
        <param>
          <type>LINEAR_ALGEBRA</type>
        </param>
        <param>
          <type>SUBTRACTION</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_linear_algebra.cpp" line="65" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_linear_algebra.cpp" bodystart="65" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="test__linear__algebra_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_linear_algebra.cpp" line="76" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_linear_algebra.cpp" bodystart="76" bodyend="80"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/math/linear_algebra.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../expect_eq_macros.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">TEST(LINEAR_ALGEBRA,<sp/>GET_SIZE)</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Vector3<sp/>vec;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(traffic_simulator::math::getSize(vec),<sp/>0.0);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>vec.x<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>vec.y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>vec.z<sp/>=<sp/>3.0;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(traffic_simulator::math::getSize(vec),<sp/>std::sqrt(10.0));</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">TEST(LINEAR_ALGEBRA,<sp/>NORMALIZE)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Vector3<sp/>vec;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>EXPECT_THROW(traffic_simulator::math::normalize(vec),<sp/>common::SimulationError);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>vec.x<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>vec.y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>vec.z<sp/>=<sp/>3.0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>vec<sp/>=<sp/>traffic_simulator::math::normalize(vec);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(vec.x,<sp/>0.31622776601683794);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(vec.y,<sp/>0.0);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(vec.z,<sp/>0.94868329805051377);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(traffic_simulator::math::getSize(vec),<sp/>1.0);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">TEST(LINEAR_ALGEBRA,<sp/>MULTIPLY)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Vector3<sp/>vec<sp/>=<sp/>traffic_simulator::math::vector3(0,<sp/>3,<sp/>1);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>vec<sp/>*<sp/>1.0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>EXPECT_VECTOR3_EQ((vec<sp/>*<sp/>1.0),<sp/>traffic_simulator::math::vector3(0,<sp/>3,<sp/>1));</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>EXPECT_VECTOR3_EQ((vec<sp/>*<sp/>2.0),<sp/>traffic_simulator::math::vector3(0,<sp/>6,<sp/>2));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>EXPECT_VECTOR3_EQ((vec<sp/>*<sp/>2.0),<sp/>(2.0<sp/>*<sp/>vec));</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">TEST(LINEAR_ALGEBRA,<sp/>ADDITION)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Vector3<sp/>vec<sp/>=<sp/>traffic_simulator::math::vector3(0,<sp/>3,<sp/>1);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>EXPECT_VECTOR3_EQ((vec<sp/>+<sp/>vec),<sp/>(2.0<sp/>*<sp/>vec));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>p.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>p.y<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>p.z<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>EXPECT_VECTOR3_EQ((p<sp/>+<sp/>vec),<sp/>(2.0<sp/>*<sp/>vec));</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">TEST(LINEAR_ALGEBRA,<sp/>SUBTRACTION)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Vector3<sp/>vec<sp/>=<sp/>traffic_simulator::math::vector3(0,<sp/>3,<sp/>1);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>EXPECT_VECTOR3_EQ((vec<sp/>-<sp/>vec),<sp/>geometry_msgs::msg::Vector3());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>p.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>p.y<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>p.z<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>EXPECT_VECTOR3_EQ((p<sp/>-<sp/>vec),<sp/>geometry_msgs::msg::Vector3());</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>argv)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_linear_algebra.cpp"/>
  </compounddef>
</doxygen>
