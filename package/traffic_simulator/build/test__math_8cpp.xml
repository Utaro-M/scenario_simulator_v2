<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="test__math_8cpp" kind="file" language="C++">
    <compoundname>test_math.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes refid="bounding__box_8hpp" local="no">traffic_simulator/math/bounding_box.hpp</includes>
    <includes refid="catmull__rom__spline_8hpp" local="no">traffic_simulator/math/catmull_rom_spline.hpp</includes>
    <includes refid="distance_8hpp" local="no">traffic_simulator/math/distance.hpp</includes>
    <includes refid="hermite__curve_8hpp" local="no">traffic_simulator/math/hermite_curve.hpp</includes>
    <includes refid="polynomial__solver_8hpp" local="no">traffic_simulator/math/polynomial_solver.hpp</includes>
    <includes refid="uuid_8hpp" local="no">traffic_simulator/math/uuid.hpp</includes>
    <incdepgraph>
      <node id="6864">
        <label>traffic_simulator/math/bounding_box.hpp</label>
        <link refid="bounding__box_8hpp_source"/>
        <childnode refid="6865" relation="include">
        </childnode>
        <childnode refid="6866" relation="include">
        </childnode>
        <childnode refid="6867" relation="include">
        </childnode>
        <childnode refid="6868" relation="include">
        </childnode>
        <childnode refid="6869" relation="include">
        </childnode>
        <childnode refid="6870" relation="include">
        </childnode>
        <childnode refid="6871" relation="include">
        </childnode>
        <childnode refid="6872" relation="include">
        </childnode>
        <childnode refid="6873" relation="include">
        </childnode>
        <childnode refid="6874" relation="include">
        </childnode>
      </node>
      <node id="6872">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="6887">
        <label>traffic_simulator/math/uuid.hpp</label>
        <link refid="uuid_8hpp"/>
        <childnode refid="6879" relation="include">
        </childnode>
      </node>
      <node id="6883">
        <label>openscenario_msgs/msg/hermite_curve.hpp</label>
      </node>
      <node id="6879">
        <label>string</label>
      </node>
      <node id="6880">
        <label>traffic_simulator/math/hermite_curve.hpp</label>
        <link refid="hermite__curve_8hpp_source"/>
        <childnode refid="6881" relation="include">
        </childnode>
        <childnode refid="6871" relation="include">
        </childnode>
        <childnode refid="6877" relation="include">
        </childnode>
        <childnode refid="6872" relation="include">
        </childnode>
        <childnode refid="6882" relation="include">
        </childnode>
        <childnode refid="6883" relation="include">
        </childnode>
        <childnode refid="6884" relation="include">
        </childnode>
        <childnode refid="6874" relation="include">
        </childnode>
      </node>
      <node id="6873">
        <label>openscenario_msgs/msg/bounding_box.hpp</label>
      </node>
      <node id="6876">
        <label>exception</label>
      </node>
      <node id="6870">
        <label>boost/geometry/geometries/point_xy.hpp</label>
      </node>
      <node id="6865">
        <label>boost/assert.hpp</label>
      </node>
      <node id="6882">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="6866">
        <label>boost/assign/list_of.hpp</label>
      </node>
      <node id="6862">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp</label>
        <link refid="test__math_8cpp"/>
        <childnode refid="6863" relation="include">
        </childnode>
        <childnode refid="6864" relation="include">
        </childnode>
        <childnode refid="6875" relation="include">
        </childnode>
        <childnode refid="6886" relation="include">
        </childnode>
        <childnode refid="6880" relation="include">
        </childnode>
        <childnode refid="6884" relation="include">
        </childnode>
        <childnode refid="6887" relation="include">
        </childnode>
      </node>
      <node id="6881">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="6877">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="6878">
        <label>openscenario_msgs/msg/catmull_rom_spline.hpp</label>
      </node>
      <node id="6874">
        <label>vector</label>
      </node>
      <node id="6863">
        <label>gtest/gtest.h</label>
      </node>
      <node id="6885">
        <label>utility</label>
      </node>
      <node id="6884">
        <label>traffic_simulator/math/polynomial_solver.hpp</label>
        <link refid="polynomial__solver_8hpp_source"/>
        <childnode refid="6874" relation="include">
        </childnode>
      </node>
      <node id="6875">
        <label>traffic_simulator/math/catmull_rom_spline.hpp</label>
        <link refid="catmull__rom__spline_8hpp_source"/>
        <childnode refid="6876" relation="include">
        </childnode>
        <childnode refid="6877" relation="include">
        </childnode>
        <childnode refid="6878" relation="include">
        </childnode>
        <childnode refid="6879" relation="include">
        </childnode>
        <childnode refid="6880" relation="include">
        </childnode>
        <childnode refid="6885" relation="include">
        </childnode>
        <childnode refid="6874" relation="include">
        </childnode>
      </node>
      <node id="6868">
        <label>boost/geometry/algorithms/disjoint.hpp</label>
      </node>
      <node id="6871">
        <label>boost/optional.hpp</label>
      </node>
      <node id="6869">
        <label>boost/geometry/geometries/linestring.hpp</label>
      </node>
      <node id="6867">
        <label>boost/geometry.hpp</label>
      </node>
      <node id="6886">
        <label>traffic_simulator/math/distance.hpp</label>
        <link refid="distance_8hpp"/>
        <childnode refid="6872" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__math_8cpp_1a0b0292a1281153990e8fd2b1bceeb367" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, PolynomialSolver1)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>PolynomialSolver1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="24" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="24" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1afe9e80e68c20a6c079ca394e703da862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, PolynomialSolver2)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>PolynomialSolver2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="32" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="32" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1a02910a63d9a139810666ca7aa7b86583" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, PolynomialSolver3)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>PolynomialSolver3</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="40" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="40" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1a8a1907ff68e44e91f81403c2ff1eafd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, HermiteCurve1)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>HermiteCurve1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="48" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="48" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1a5570b36e3c21109174e9d46ddc8d9869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, HermiteCurve2)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>HermiteCurve2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="79" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="79" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1ad3f2bc23ecee960278d04a73d052b873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, CatmullRomSpline1)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>CatmullRomSpline1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="110" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="110" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1addd17cf1f621ae907ee20f110423589d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, CatmullRomSpline2)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>CatmullRomSpline2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="138" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="138" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1a3e3767cca1ff0d2f625c199f7b82a06d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, CatmullRomSpline3)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>CatmullRomSpline3</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="151" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="151" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1a21e364c66beef2a3c3eb403d457c4872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, CatmullRomSpline4)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>CatmullRomSpline4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="167" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="167" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1a863bf65780118707b578e9628249e0cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, CatmullRomSpline5)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>CatmullRomSpline5</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="186" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="186" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1ab3001b9f1fd36e6301f56aede4c6cb1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, CatmullRomSpline6)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>CatmullRomSpline6</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="206" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="206" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1a6bfb71cfa8fe155e8fc88220d78774f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, CatmullRomSpline7)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>CatmullRomSpline7</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="228" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="228" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1a29af2a6f72f64c256358e55f5c4aba93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, BoundingBox0)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>BoundingBox0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="249" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="249" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1ab7109ed460d6aae4c09acca436061931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, BoundingBox1)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>BoundingBox1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="264" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="264" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1a5d2dc95c0f3ada42a253a283ca80d053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, UUID)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>UUID</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="282" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="282" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1abc62edbd97c1335eb42a8bcd8293355c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, Distance0)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>Distance0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="289" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="289" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1ae45cf83430283e9e004fe408fde34c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, Distance1)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>Distance1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="299" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="299" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1a550a74192335083e3d1bbdc30594f527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, Distance2)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>Distance2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="309" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="309" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1a1df3ff64b4d14552b762e78115e46e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Math, Distance3)</argsstring>
        <name>TEST</name>
        <param>
          <type>Math</type>
        </param>
        <param>
          <type>Distance3</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="320" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="320" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="test__math_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" line="331" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp" bodystart="331" bodyend="335"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/math/bounding_box.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/math/catmull_rom_spline.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="distance_8hpp" kindref="compound">traffic_simulator/math/distance.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/math/hermite_curve.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/math/polynomial_solver.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="uuid_8hpp" kindref="compound">traffic_simulator/math/uuid.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">TEST(Math,<sp/>PolynomialSolver1)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver" kindref="compound">traffic_simulator::math::PolynomialSolver</ref><sp/>solver;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>solver.<ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver_1accecc4a13acd2695435994058d63e6c4" kindref="member">solveLinearEquation</ref>(-20,<sp/>3,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ret.size(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1));</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(ret[0],<sp/>0.15);</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">TEST(Math,<sp/>PolynomialSolver2)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver" kindref="compound">traffic_simulator::math::PolynomialSolver</ref><sp/>solver;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>solver.<ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver_1acfcb4a0ad94ff495575f5e7df56493fb" kindref="member">solveQuadraticEquation</ref>(2,<sp/>3,<sp/>-5,<sp/>0,<sp/>2);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ret.size(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(ret[0],<sp/>1);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">TEST(Math,<sp/>PolynomialSolver3)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver" kindref="compound">traffic_simulator::math::PolynomialSolver</ref><sp/>solver;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>solver.<ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver_1a4b580418d1f04131b96a09d08f74b7bd" kindref="member">solveCubicEquation</ref>(1,<sp/>-2,<sp/>-11,<sp/>12,<sp/>0,<sp/>2);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>EXPECT_EQ(ret.size(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(ret[0],<sp/>1);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">TEST(Math,<sp/>HermiteCurve1)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>start_pose,<sp/>goal_pose;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Vector3<sp/>start_vec,<sp/>goal_vec;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>goal_pose.position.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>start_vec.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>goal_vec.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1math_1_1HermiteCurve" kindref="compound">traffic_simulator::math::HermiteCurve</ref><sp/>curve(start_pose,<sp/>goal_pose,<sp/>start_vec,<sp/>goal_vec);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.getLength(),<sp/>1);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.getPoint(0.5,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).x,<sp/>0.5);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.getTangentVector(0.5,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).x,<sp/>1);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.getMaximum2DCurvature(),<sp/>0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>p.x<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>p.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>p.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(curve.getSValue(p,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((curve.getSValue(p,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).get()<sp/>&gt;<sp/>0.099)<sp/>&amp;&amp;<sp/>(curve.getSValue(p,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).get()<sp/>&lt;<sp/>0.101));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>start;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>start.x<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>start.y<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>goal;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>goal.x<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>goal.y<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>collision_s<sp/>=<sp/>curve.getCollisionPointIn2D(start,<sp/>goal);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(collision_s);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collision_s)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(collision_s.get(),<sp/>0.1);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">TEST(Math,<sp/>HermiteCurve2)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>start_pose,<sp/>goal_pose;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Vector3<sp/>start_vec,<sp/>goal_vec;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>goal_pose.position.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>start_vec.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>goal_vec.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1math_1_1HermiteCurve" kindref="compound">traffic_simulator::math::HermiteCurve</ref><sp/>curve(start_pose,<sp/>goal_pose,<sp/>start_vec,<sp/>goal_vec);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.getLength(),<sp/>1);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.getPoint(0.5,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).x,<sp/>0.5);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.getTangentVector(0.5,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).x,<sp/>1);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.getMaximum2DCurvature(),<sp/>0);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>p.x<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>p.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>p.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(curve.getSValue(p,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((curve.getSValue(p,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).get()<sp/>&gt;<sp/>0.099)<sp/>&amp;&amp;<sp/>(curve.getSValue(p,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).get()<sp/>&lt;<sp/>0.101));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>start;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>start.x<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>start.y<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>goal;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>goal.x<sp/>=<sp/>0.2;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>goal.y<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>collision_s<sp/>=<sp/>curve.getCollisionPointIn2D(start,<sp/>goal);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(collision_s);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collision_s)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(collision_s.get(),<sp/>0.15);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">TEST(Math,<sp/>CatmullRomSpline1)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p1;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>p1.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p2;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>p2.x<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>points<sp/>=<sp/>{p0,<sp/>p1,<sp/>p2};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>spline<sp/>=<sp/><ref refid="classtraffic__simulator_1_1math_1_1CatmullRomSpline" kindref="compound">traffic_simulator::math::CatmullRomSpline</ref>(points);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(spline.getLength(),<sp/>2);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>start;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>start.x<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>start.y<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>goal;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>goal.x<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>goal.y<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>collision_s<sp/>=<sp/>spline.getCollisionPointIn2D(start,<sp/>goal);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(collision_s);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collision_s)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(collision_s.get(),<sp/>0.1);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>collision_s<sp/>=<sp/>spline.getCollisionPointIn2D(start,<sp/>goal,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(collision_s);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collision_s)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(collision_s.get(),<sp/>0.1);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">TEST(Math,<sp/>CatmullRomSpline2)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p1;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>p1.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>p1.y<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p2;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>p2.x<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>p2.y<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>points<sp/>=<sp/>{p0,<sp/>p1,<sp/>p2};</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>EXPECT_NO_THROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>spline<sp/>=<sp/><ref refid="classtraffic__simulator_1_1math_1_1CatmullRomSpline" kindref="compound">traffic_simulator::math::CatmullRomSpline</ref>(points));</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">TEST(Math,<sp/>CatmullRomSpline3)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p0;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p1;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>p1.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>p1.y<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p2;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>p2.x<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>p2.y<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p3;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>p3.x<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>p3.y<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>points<sp/>=<sp/>{p0,<sp/>p1,<sp/>p2,<sp/>p3};</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>EXPECT_NO_THROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>spline<sp/>=<sp/><ref refid="classtraffic__simulator_1_1math_1_1CatmullRomSpline" kindref="compound">traffic_simulator::math::CatmullRomSpline</ref>(points));</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">TEST(Math,<sp/>CatmullRomSpline4)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p0;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p1;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>p1.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>p1.y<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p2;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>p2.x<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>p2.y<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p3;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>p3.x<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>p3.y<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p4;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>p4.x<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>p4.y<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>points<sp/>=<sp/>{p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4};</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>EXPECT_NO_THROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>spline<sp/>=<sp/><ref refid="classtraffic__simulator_1_1math_1_1CatmullRomSpline" kindref="compound">traffic_simulator::math::CatmullRomSpline</ref>(points));</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">TEST(Math,<sp/>CatmullRomSpline5)</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p1;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>p1.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p2;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>p2.x<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p3;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>p3.x<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p4;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>p4.x<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>points<sp/>=<sp/>{p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4};</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>spline<sp/>=<sp/><ref refid="classtraffic__simulator_1_1math_1_1CatmullRomSpline" kindref="compound">traffic_simulator::math::CatmullRomSpline</ref>(points);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(spline.getLength(),<sp/>4);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>point<sp/>=<sp/>spline.getPoint(3);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(point.x,<sp/>3);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(point.y,<sp/>0);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(point.z,<sp/>0);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal">TEST(Math,<sp/>CatmullRomSpline6)</highlight></codeline>
<codeline lineno="207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p0;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>p0.x<sp/>=<sp/>-30.9281;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>p0.y<sp/>=<sp/>-23.1708;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>p0.z<sp/>=<sp/>-0.132544;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p1;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>p1.x<sp/>=<sp/>-29.2938;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>p1.y<sp/>=<sp/>-22.2938;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>p1.z<sp/>=<sp/>-0.162124;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p2;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>p2.x<sp/>=<sp/>-27.6596;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>p2.y<sp/>=<sp/>-21.4167;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>p2.z<sp/>=<sp/>-0.191704;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p3;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>p3.x<sp/>=<sp/>-33.0324;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>p3.y<sp/>=<sp/>-92.7566;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>p3.z<sp/>=<sp/>2.28524;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>points<sp/>=<sp/>{p0,<sp/>p1,<sp/>p2,<sp/>p3};</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>spline<sp/>=<sp/><ref refid="classtraffic__simulator_1_1math_1_1CatmullRomSpline" kindref="compound">traffic_simulator::math::CatmullRomSpline</ref>(points);</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">TEST(Math,<sp/>CatmullRomSpline7)</highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p0;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p1;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>p1.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p2;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>p2.x<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p3;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>p3.x<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>points<sp/>=<sp/>{p0,<sp/>p1,<sp/>p2,<sp/>p3};</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>spline<sp/>=<sp/><ref refid="classtraffic__simulator_1_1math_1_1CatmullRomSpline" kindref="compound">traffic_simulator::math::CatmullRomSpline</ref>(points);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>p.x<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>p.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>p.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(spline.getSValue(p));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;result<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>spline.getSValue(p).get()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(spline.getSValue(p).get()<sp/>&gt;<sp/>0.099);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(spline.getSValue(p).get()<sp/>&lt;<sp/>0.101);</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">TEST(Math,<sp/>BoundingBox0)</highlight></codeline>
<codeline lineno="250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>pose0;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::BoundingBox<sp/>bbox0;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>bbox0.dimensions.x<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>bbox0.dimensions.y<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>bbox0.dimensions.z<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>pose1;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::BoundingBox<sp/>bbox1;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>bbox1.dimensions.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>bbox1.dimensions.y<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>bbox1.dimensions.z<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>EXPECT_EQ(traffic_simulator::math::getPolygonDistance(pose0,<sp/>bbox0,<sp/>pose1,<sp/>bbox1),<sp/>boost::none);</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">TEST(Math,<sp/>BoundingBox1)</highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>pose0;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::BoundingBox<sp/>bbox0;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>bbox0.dimensions.x<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>bbox0.dimensions.y<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>bbox0.dimensions.z<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>pose1;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>pose1.position.y<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::BoundingBox<sp/>bbox1;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>bbox1.dimensions.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>bbox1.dimensions.y<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>bbox1.dimensions.z<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(traffic_simulator::math::getPolygonDistance(pose0,<sp/>bbox0,<sp/>pose1,<sp/>bbox1));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>traffic_simulator::math::getPolygonDistance(pose0,<sp/>bbox0,<sp/>pose1,<sp/>bbox1).</highlight><highlight class="keyword">get</highlight><highlight class="normal">(),<sp/>3.0);</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal">TEST(Math,<sp/>UUID)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>traffic_simulator::math::generateUUID(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">).c_str(),</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>traffic_simulator::math::generateUUID(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">TEST(Math,<sp/>Distance0)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p0,<sp/>p1;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(traffic_simulator::math::getDistance(p0,<sp/>p1),<sp/>0);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>p1.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(traffic_simulator::math::getDistance(p0,<sp/>p1),<sp/>1);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>p0.y<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(traffic_simulator::math::getDistance(p0,<sp/>p1),<sp/>std::sqrt(2));</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">TEST(Math,<sp/>Distance1)</highlight></codeline>
<codeline lineno="300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>p0,<sp/>p1;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(traffic_simulator::math::getDistance(p0,<sp/>p1),<sp/>0);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>p1.position.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(traffic_simulator::math::getDistance(p0,<sp/>p1),<sp/>1);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>p0.position.y<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(traffic_simulator::math::getDistance(p0,<sp/>p1),<sp/>std::sqrt(2));</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">TEST(Math,<sp/>Distance2)</highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p0;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>p1;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(traffic_simulator::math::getDistance(p0,<sp/>p1),<sp/>0);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>p1.position.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(traffic_simulator::math::getDistance(p0,<sp/>p1),<sp/>1);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>p0.y<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(traffic_simulator::math::getDistance(p0,<sp/>p1),<sp/>std::sqrt(2));</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">TEST(Math,<sp/>Distance3)</highlight></codeline>
<codeline lineno="321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>p0;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p1;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(traffic_simulator::math::getDistance(p0,<sp/>p1),<sp/>0);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>p1.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(traffic_simulator::math::getDistance(p0,<sp/>p1),<sp/>1);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>p0.position.y<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(traffic_simulator::math::getDistance(p0,<sp/>p1),<sp/>std::sqrt(2));</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>argv)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/test_math.cpp"/>
  </compounddef>
</doxygen>
