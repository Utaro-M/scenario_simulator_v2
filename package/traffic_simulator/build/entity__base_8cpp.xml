<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="entity__base_8cpp" kind="file" language="C++">
    <compoundname>entity_base.cpp</compoundname>
    <includes local="no">limits</includes>
    <includes local="no">queue</includes>
    <includes local="no">rclcpp/rclcpp.hpp</includes>
    <includes local="no">scenario_simulator_exception/exception.hpp</includes>
    <includes local="no">string</includes>
    <includes refid="entity__base_8hpp" local="no">traffic_simulator/entity/entity_base.hpp</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="5312">
        <label>scenario_simulator_exception/exception.hpp</label>
      </node>
      <node id="5361">
        <label>traffic_simulator/traffic_lights/traffic_light_state.hpp</label>
        <link refid="traffic__light__state_8hpp_source"/>
        <childnode refid="5362" relation="include">
        </childnode>
        <childnode refid="5363" relation="include">
        </childnode>
        <childnode refid="5364" relation="include">
        </childnode>
      </node>
      <node id="5368">
        <label>iomanip</label>
      </node>
      <node id="5310">
        <label>queue</label>
      </node>
      <node id="5309">
        <label>limits</label>
      </node>
      <node id="5341">
        <label>geometry_msgs/msg/pose_stamped.hpp</label>
      </node>
      <node id="5321">
        <label>openscenario_msgs/msg/entity_type.hpp</label>
      </node>
      <node id="5374">
        <label>std_msgs/msg/color_rgba.hpp</label>
      </node>
      <node id="5340">
        <label>geographic_msgs/msg/geo_point.hpp</label>
      </node>
      <node id="5324">
        <label>openscenario_msgs/msg/waypoints_array.hpp</label>
      </node>
      <node id="5333">
        <label>lanelet2_routing/RoutingGraph.h</label>
      </node>
      <node id="5375">
        <label>traffic_simulator/traffic_lights/traffic_light_phase.hpp</label>
        <link refid="traffic__light__phase_8hpp_source"/>
        <childnode refid="5309" relation="include">
        </childnode>
        <childnode refid="5312" relation="include">
        </childnode>
        <childnode refid="5325" relation="include">
        </childnode>
        <childnode refid="5359" relation="include">
        </childnode>
        <childnode refid="5358" relation="include">
        </childnode>
      </node>
      <node id="5328">
        <label>lanelet2_core/geometry/Lanelet.h</label>
      </node>
      <node id="5367">
        <label>autoware_perception_msgs/msg/traffic_light_state_array.hpp</label>
      </node>
      <node id="5320">
        <label>openscenario_msgs/msg/entity_status.hpp</label>
      </node>
      <node id="5362">
        <label>autoware_perception_msgs/msg/lamp_state.hpp</label>
      </node>
      <node id="5354">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="5323">
        <label>openscenario_msgs/msg/vehicle_parameters.hpp</label>
      </node>
      <node id="5308">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/entity/entity_base.cpp</label>
        <link refid="entity__base_8cpp"/>
        <childnode refid="5309" relation="include">
        </childnode>
        <childnode refid="5310" relation="include">
        </childnode>
        <childnode refid="5311" relation="include">
        </childnode>
        <childnode refid="5312" relation="include">
        </childnode>
        <childnode refid="5313" relation="include">
        </childnode>
        <childnode refid="5314" relation="include">
        </childnode>
        <childnode refid="5360" relation="include">
        </childnode>
        <childnode refid="5358" relation="include">
        </childnode>
      </node>
      <node id="5372">
        <label>cassert</label>
      </node>
      <node id="5364">
        <label>stdexcept</label>
      </node>
      <node id="5356">
        <label>openscenario_msgs/msg/hermite_curve.hpp</label>
      </node>
      <node id="5313">
        <label>string</label>
      </node>
      <node id="5322">
        <label>openscenario_msgs/msg/obstacle.hpp</label>
      </node>
      <node id="5344">
        <label>lanelet2_extension_psim/utility/utilities.hpp</label>
      </node>
      <node id="5346">
        <label>traffic_simulator/hdmap_utils/cache.hpp</label>
        <link refid="cache_8hpp_source"/>
        <childnode refid="5316" relation="include">
        </childnode>
        <childnode refid="5347" relation="include">
        </childnode>
        <childnode refid="5348" relation="include">
        </childnode>
        <childnode refid="5312" relation="include">
        </childnode>
        <childnode refid="5349" relation="include">
        </childnode>
        <childnode refid="5360" relation="include">
        </childnode>
        <childnode refid="5358" relation="include">
        </childnode>
      </node>
      <node id="5345">
        <label>map</label>
      </node>
      <node id="5352">
        <label>traffic_simulator/math/hermite_curve.hpp</label>
        <link refid="hermite__curve_8hpp_source"/>
        <childnode refid="5353" relation="include">
        </childnode>
        <childnode refid="5316" relation="include">
        </childnode>
        <childnode refid="5347" relation="include">
        </childnode>
        <childnode refid="5354" relation="include">
        </childnode>
        <childnode refid="5355" relation="include">
        </childnode>
        <childnode refid="5356" relation="include">
        </childnode>
        <childnode refid="5357" relation="include">
        </childnode>
        <childnode refid="5358" relation="include">
        </childnode>
      </node>
      <node id="5371">
        <label>traffic_simulator/color_utils/color_utils.hpp</label>
        <link refid="color__utils_8hpp_source"/>
        <childnode refid="5372" relation="include">
        </childnode>
        <childnode refid="5373" relation="include">
        </childnode>
        <childnode refid="5345" relation="include">
        </childnode>
        <childnode refid="5374" relation="include">
        </childnode>
        <childnode refid="5313" relation="include">
        </childnode>
      </node>
      <node id="5318">
        <label>openscenario_msgs/msg/bounding_box.hpp</label>
      </node>
      <node id="5311">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="5332">
        <label>lanelet2_routing/RoutingCost.h</label>
      </node>
      <node id="5337">
        <label>tf2_geometry_msgs/tf2_geometry_msgs.h</label>
      </node>
      <node id="5325">
        <label>traffic_simulator/hdmap_utils/hdmap_utils.hpp</label>
        <link refid="hdmap__utils_8hpp_source"/>
        <childnode refid="5326" relation="include">
        </childnode>
        <childnode refid="5327" relation="include">
        </childnode>
        <childnode refid="5328" relation="include">
        </childnode>
        <childnode refid="5329" relation="include">
        </childnode>
        <childnode refid="5330" relation="include">
        </childnode>
        <childnode refid="5331" relation="include">
        </childnode>
        <childnode refid="5332" relation="include">
        </childnode>
        <childnode refid="5333" relation="include">
        </childnode>
        <childnode refid="5334" relation="include">
        </childnode>
        <childnode refid="5335" relation="include">
        </childnode>
        <childnode refid="5336" relation="include">
        </childnode>
        <childnode refid="5337" relation="include">
        </childnode>
        <childnode refid="5338" relation="include">
        </childnode>
        <childnode refid="5339" relation="include">
        </childnode>
        <childnode refid="5316" relation="include">
        </childnode>
        <childnode refid="5340" relation="include">
        </childnode>
        <childnode refid="5341" relation="include">
        </childnode>
        <childnode refid="5342" relation="include">
        </childnode>
        <childnode refid="5343" relation="include">
        </childnode>
        <childnode refid="5344" relation="include">
        </childnode>
        <childnode refid="5345" relation="include">
        </childnode>
        <childnode refid="5317" relation="include">
        </childnode>
        <childnode refid="5320" relation="include">
        </childnode>
        <childnode refid="5311" relation="include">
        </childnode>
        <childnode refid="5313" relation="include">
        </childnode>
        <childnode refid="5346" relation="include">
        </childnode>
        <childnode refid="5352" relation="include">
        </childnode>
        <childnode refid="5361" relation="include">
        </childnode>
        <childnode refid="5360" relation="include">
        </childnode>
        <childnode refid="5359" relation="include">
        </childnode>
        <childnode refid="5358" relation="include">
        </childnode>
        <childnode refid="5365" relation="include">
        </childnode>
      </node>
      <node id="5350">
        <label>exception</label>
      </node>
      <node id="5326">
        <label>geometry_msgs/msg/vector3.h</label>
      </node>
      <node id="5355">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="5319">
        <label>openscenario_msgs/msg/driver_model.hpp</label>
      </node>
      <node id="5370">
        <label>autoware_perception_msgs/msg/traffic_light_state.hpp</label>
      </node>
      <node id="5331">
        <label>lanelet2_routing/Route.h</label>
      </node>
      <node id="5343">
        <label>lanelet2_extension_psim/utility/query.hpp</label>
      </node>
      <node id="5353">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="5342">
        <label>lanelet2_extension_psim/utility/message_conversion.hpp</label>
      </node>
      <node id="5347">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="5373">
        <label>cstdio</label>
      </node>
      <node id="5351">
        <label>openscenario_msgs/msg/catmull_rom_spline.hpp</label>
      </node>
      <node id="5358">
        <label>vector</label>
      </node>
      <node id="5339">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="5315">
        <label>autoware_vehicle_msgs/msg/vehicle_command.hpp</label>
      </node>
      <node id="5359">
        <label>utility</label>
      </node>
      <node id="5357">
        <label>traffic_simulator/math/polynomial_solver.hpp</label>
        <link refid="polynomial__solver_8hpp_source"/>
        <childnode refid="5358" relation="include">
        </childnode>
      </node>
      <node id="5335">
        <label>lanelet2_traffic_rules/TrafficRulesFactory.h</label>
      </node>
      <node id="5349">
        <label>traffic_simulator/math/catmull_rom_spline.hpp</label>
        <link refid="catmull__rom__spline_8hpp_source"/>
        <childnode refid="5350" relation="include">
        </childnode>
        <childnode refid="5347" relation="include">
        </childnode>
        <childnode refid="5351" relation="include">
        </childnode>
        <childnode refid="5313" relation="include">
        </childnode>
        <childnode refid="5352" relation="include">
        </childnode>
        <childnode refid="5359" relation="include">
        </childnode>
        <childnode refid="5358" relation="include">
        </childnode>
      </node>
      <node id="5330">
        <label>lanelet2_core/primitives/LaneletSequence.h</label>
      </node>
      <node id="5363">
        <label>iostream</label>
      </node>
      <node id="5327">
        <label>lanelet2_core/LaneletMap.h</label>
      </node>
      <node id="5369">
        <label>traffic_simulator/traffic_lights/traffic_light.hpp</label>
        <link refid="traffic__light_8hpp_source"/>
        <childnode refid="5370" relation="include">
        </childnode>
        <childnode refid="5363" relation="include">
        </childnode>
        <childnode refid="5309" relation="include">
        </childnode>
        <childnode refid="5364" relation="include">
        </childnode>
        <childnode refid="5371" relation="include">
        </childnode>
        <childnode refid="5375" relation="include">
        </childnode>
        <childnode refid="5361" relation="include">
        </childnode>
        <childnode refid="5360" relation="include">
        </childnode>
        <childnode refid="5359" relation="include">
        </childnode>
        <childnode refid="5358" relation="include">
        </childnode>
      </node>
      <node id="5366">
        <label>traffic_simulator/traffic_lights/traffic_light_manager.hpp</label>
        <link refid="traffic__light__manager_8hpp_source"/>
        <childnode refid="5367" relation="include">
        </childnode>
        <childnode refid="5368" relation="include">
        </childnode>
        <childnode refid="5317" relation="include">
        </childnode>
        <childnode refid="5311" relation="include">
        </childnode>
        <childnode refid="5364" relation="include">
        </childnode>
        <childnode refid="5313" relation="include">
        </childnode>
        <childnode refid="5325" relation="include">
        </childnode>
        <childnode refid="5369" relation="include">
        </childnode>
        <childnode refid="5360" relation="include">
        </childnode>
        <childnode refid="5359" relation="include">
        </childnode>
        <childnode refid="5358" relation="include">
        </childnode>
        <childnode refid="5365" relation="include">
        </childnode>
      </node>
      <node id="5360">
        <label>unordered_map</label>
      </node>
      <node id="5338">
        <label>autoware_auto_msgs/msg/had_map_bin.hpp</label>
      </node>
      <node id="5365">
        <label>visualization_msgs/msg/marker_array.hpp</label>
      </node>
      <node id="5348">
        <label>mutex</label>
      </node>
      <node id="5329">
        <label>lanelet2_core/primitives/BasicRegulatoryElements.h</label>
      </node>
      <node id="5314">
        <label>traffic_simulator/entity/entity_base.hpp</label>
        <link refid="entity__base_8hpp_source"/>
        <childnode refid="5315" relation="include">
        </childnode>
        <childnode refid="5316" relation="include">
        </childnode>
        <childnode refid="5317" relation="include">
        </childnode>
        <childnode refid="5318" relation="include">
        </childnode>
        <childnode refid="5319" relation="include">
        </childnode>
        <childnode refid="5320" relation="include">
        </childnode>
        <childnode refid="5321" relation="include">
        </childnode>
        <childnode refid="5322" relation="include">
        </childnode>
        <childnode refid="5323" relation="include">
        </childnode>
        <childnode refid="5324" relation="include">
        </childnode>
        <childnode refid="5310" relation="include">
        </childnode>
        <childnode refid="5313" relation="include">
        </childnode>
        <childnode refid="5325" relation="include">
        </childnode>
        <childnode refid="5366" relation="include">
        </childnode>
        <childnode refid="5360" relation="include">
        </childnode>
        <childnode refid="5358" relation="include">
        </childnode>
        <childnode refid="5365" relation="include">
        </childnode>
      </node>
      <node id="5334">
        <label>lanelet2_routing/RoutingGraphContainer.h</label>
      </node>
      <node id="5316">
        <label>boost/optional.hpp</label>
      </node>
      <node id="5336">
        <label>tf2/LinearMath/Matrix3x3.h</label>
      </node>
      <node id="5317">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetraffic__simulator">traffic_simulator</innernamespace>
    <innernamespace refid="namespacetraffic__simulator_1_1entity">traffic_simulator::entity</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;rclcpp/rclcpp.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;scenario_simulator_exception/exception.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/entity/entity_base.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetraffic__simulator" kindref="compound">traffic_simulator</ref></highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">entity</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal">EntityBase::EntityBase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">:<sp/>type(type),<sp/>name(name),<sp/>status_(boost::none),<sp/>verbose_(true),<sp/>visibility_(true)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>status_<sp/>=<sp/>boost::none;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">EntityBase::EntityBase(</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityStatus<sp/>&amp;<sp/>initial_state)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">:<sp/>EntityBase(type,<sp/>name)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>status_<sp/>=<sp/>initial_state;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityBase::onUpdate(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>{<sp/>status_before_update_<sp/>=<sp/>status_;<sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">boost::optional&lt;double&gt;<sp/>EntityBase::getStandStillDuration()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stand_still_duration_;<sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>autoware_vehicle_msgs::msg::VehicleCommand<sp/>EntityBase::getVehicleCommand()</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>THROW_SIMULATION_ERROR(</highlight><highlight class="stringliteral">&quot;get<sp/>vehicle<sp/>command<sp/>does<sp/>not<sp/>support<sp/>in<sp/>&quot;</highlight><highlight class="normal">,<sp/>type,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>entity<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityBase::updateStandStillDuration(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>step_time)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status_)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>stand_still_duration_<sp/>=<sp/>boost::none;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stand_still_duration_)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stand_still_duration_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::fabs(status_-&gt;action_status.twist.linear.x)<sp/>&lt;=<sp/>std::numeric_limits&lt;double&gt;::epsilon())<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stand_still_duration_<sp/>=<sp/>step_time<sp/>+<sp/>stand_still_duration_.get();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stand_still_duration_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityBase::updateEntityStatusTimestamp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_time)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status_)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>status_-&gt;time<sp/>=<sp/>current_time;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityBase::setOtherStatus(</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unordered_map&lt;std::string,<sp/>openscenario_msgs::msg::EntityStatus&gt;<sp/>&amp;<sp/>status)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>other_status_.clear();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status_)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>each<sp/>:<sp/>status)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(each.first<sp/>!=<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p0<sp/>=<sp/>each.second.pose.position;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/>status_.get().pose.position;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distance<sp/>=</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sqrt(std::pow(p0.x<sp/>-<sp/>p1.x,<sp/>2)<sp/>+<sp/>std::pow(p0.y<sp/>-<sp/>p1.y,<sp/>2)<sp/>+<sp/>std::pow(p0.z<sp/>-<sp/>p1.z,<sp/>2));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance<sp/>&lt;<sp/>30)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other_status_.insert(each);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityStatus<sp/>EntityBase::getStatus()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="95"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status_)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;status<sp/>is<sp/>not<sp/>set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;status_.get();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityBase::setStatus(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityStatus<sp/>&amp;<sp/>status)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>status_<sp/>=<sp/>status;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>status_-&gt;name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityBase::stopAtEndOfRoad()</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status_)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;status<sp/>is<sp/>not<sp/>set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>status_.get().action_status.twist<sp/>=<sp/>geometry_msgs::msg::Twist();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>status_.get().action_status.accel<sp/>=<sp/>geometry_msgs::msg::Accel();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>traffic_simulator</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/entity/entity_base.cpp"/>
  </compounddef>
</doxygen>
