<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="api_8cpp" kind="file" language="C++">
    <compoundname>api.cpp</compoundname>
    <includes local="no">tf2/LinearMath/Quaternion.h</includes>
    <includes local="no">limits</includes>
    <includes local="no">memory</includes>
    <includes local="no">rclcpp/rclcpp.hpp</includes>
    <includes local="no">scenario_simulator_exception/exception.hpp</includes>
    <includes local="no">simulation_interface/conversions.hpp</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes refid="api_8hpp" local="no">traffic_simulator/api/api.hpp</includes>
    <incdepgraph>
      <node id="3770">
        <label>simulation_interface/conversions.hpp</label>
      </node>
      <node id="3769">
        <label>scenario_simulator_exception/exception.hpp</label>
      </node>
      <node id="3878">
        <label>traffic_simulator/vehicle_model/sim_model_time_delay.hpp</label>
        <link refid="sim__model__time__delay_8hpp"/>
        <childnode refid="3879" relation="include">
        </childnode>
        <childnode refid="3875" relation="include">
        </childnode>
        <childnode refid="3876" relation="include">
        </childnode>
        <childnode refid="3835" relation="include">
        </childnode>
        <childnode refid="3797" relation="include">
        </childnode>
        <childnode refid="3877" relation="include">
        </childnode>
        <childnode refid="3880" relation="include">
        </childnode>
      </node>
      <node id="3852">
        <label>traffic_simulator/behavior/route_planner.hpp</label>
        <link refid="route__planner_8hpp_source"/>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3797" relation="include">
        </childnode>
        <childnode refid="3798" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3833">
        <label>traffic_simulator/traffic_lights/traffic_light_state.hpp</label>
        <link refid="traffic__light__state_8hpp_source"/>
        <childnode refid="3834" relation="include">
        </childnode>
        <childnode refid="3835" relation="include">
        </childnode>
        <childnode refid="3771" relation="include">
        </childnode>
      </node>
      <node id="3880">
        <label>traffic_simulator/vehicle_model/sim_model_util.hpp</label>
        <link refid="sim__model__util_8hpp_source"/>
        <childnode refid="3881" relation="include">
        </childnode>
      </node>
      <node id="3871">
        <label>boost/property_tree/xml_parser.hpp</label>
      </node>
      <node id="3773">
        <label>traffic_simulator/api/api.hpp</label>
        <link refid="api_8hpp_source"/>
        <childnode refid="3774" relation="include">
        </childnode>
        <childnode refid="3775" relation="include">
        </childnode>
        <childnode refid="3776" relation="include">
        </childnode>
        <childnode refid="3777" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3778" relation="include">
        </childnode>
        <childnode refid="3768" relation="include">
        </childnode>
        <childnode refid="3779" relation="include">
        </childnode>
        <childnode refid="3780" relation="include">
        </childnode>
        <childnode refid="3771" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3781" relation="include">
        </childnode>
        <childnode refid="3788" relation="include">
        </childnode>
        <childnode refid="3845" relation="include">
        </childnode>
        <childnode refid="3894" relation="include">
        </childnode>
        <childnode refid="3899" relation="include">
        </childnode>
        <childnode refid="3903" relation="include">
        </childnode>
        <childnode refid="3904" relation="include">
        </childnode>
        <childnode refid="3839" relation="include">
        </childnode>
        <childnode refid="3831" relation="include">
        </childnode>
      </node>
      <node id="3857">
        <label>functional</label>
      </node>
      <node id="3787">
        <label>iomanip</label>
      </node>
      <node id="3797">
        <label>queue</label>
      </node>
      <node id="3890">
        <label>traffic_simulator/behavior/pedestrian/walk_straight_action.hpp</label>
        <link refid="walk__straight__action_8hpp"/>
        <childnode refid="3859" relation="include">
        </childnode>
        <childnode refid="3855" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3792" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3888" relation="include">
        </childnode>
        <childnode refid="3889" relation="include">
        </childnode>
        <childnode refid="3798" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3766">
        <label>limits</label>
      </node>
      <node id="3813">
        <label>geometry_msgs/msg/pose_stamped.hpp</label>
      </node>
      <node id="3779">
        <label>rosgraph_msgs/msg/clock.hpp</label>
      </node>
      <node id="3785">
        <label>boost/filesystem/operations.hpp</label>
      </node>
      <node id="3793">
        <label>openscenario_msgs/msg/entity_type.hpp</label>
      </node>
      <node id="3843">
        <label>std_msgs/msg/color_rgba.hpp</label>
      </node>
      <node id="3856">
        <label>behaviortree_cpp_v3/loggers/bt_cout_logger.h</label>
      </node>
      <node id="3886">
        <label>traffic_simulator/behavior/pedestrian/behavior_tree.hpp</label>
        <link refid="pedestrian_2behavior__tree_8hpp_source"/>
        <childnode refid="3855" relation="include">
        </childnode>
        <childnode refid="3856" relation="include">
        </childnode>
        <childnode refid="3857" relation="include">
        </childnode>
        <childnode refid="3819" relation="include">
        </childnode>
        <childnode refid="3817" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3792" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3887" relation="include">
        </childnode>
        <childnode refid="3890" relation="include">
        </childnode>
        <childnode refid="3798" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3891">
        <label>traffic_simulator/traffic/traffic_sink.hpp</label>
        <link refid="traffic__sink_8hpp"/>
        <childnode refid="3857" relation="include">
        </childnode>
        <childnode refid="3826" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3892" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3812">
        <label>geographic_msgs/msg/geo_point.hpp</label>
      </node>
      <node id="3883">
        <label>openscenario_msgs/msg/misc_object_parameters.hpp</label>
      </node>
      <node id="3796">
        <label>openscenario_msgs/msg/waypoints_array.hpp</label>
      </node>
      <node id="3894">
        <label>traffic_simulator/helper/helper.hpp</label>
        <link refid="helper_8hpp_source"/>
        <childnode refid="3774" relation="include">
        </childnode>
        <childnode refid="3895" relation="include">
        </childnode>
        <childnode refid="3826" relation="include">
        </childnode>
        <childnode refid="3896" relation="include">
        </childnode>
        <childnode refid="3835" relation="include">
        </childnode>
        <childnode refid="3897" relation="include">
        </childnode>
        <childnode refid="3898" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
      </node>
      <node id="3877">
        <label>traffic_simulator/vehicle_model/sim_model_interface.hpp</label>
        <link refid="sim__model__interface_8hpp"/>
        <childnode refid="3875" relation="include">
        </childnode>
        <childnode refid="3768" relation="include">
        </childnode>
      </node>
      <node id="3806">
        <label>lanelet2_routing/RoutingGraph.h</label>
      </node>
      <node id="3844">
        <label>traffic_simulator/traffic_lights/traffic_light_phase.hpp</label>
        <link refid="traffic__light__phase_8hpp_source"/>
        <childnode refid="3766" relation="include">
        </childnode>
        <childnode refid="3769" relation="include">
        </childnode>
        <childnode refid="3798" relation="include">
        </childnode>
        <childnode refid="3831" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3902">
        <label>traffic_simulator/metrics/metric_base.hpp</label>
        <link refid="metric__base_8hpp_source"/>
        <childnode refid="3790" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3901" relation="include">
        </childnode>
        <childnode refid="3769" relation="include">
        </childnode>
        <childnode refid="3771" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3845" relation="include">
        </childnode>
      </node>
      <node id="3884">
        <label>traffic_simulator/entity/pedestrian_entity.hpp</label>
        <link refid="pedestrian__entity_8hpp_source"/>
        <childnode refid="3790" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3885" relation="include">
        </childnode>
        <childnode refid="3872" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3886" relation="include">
        </childnode>
        <childnode refid="3852" relation="include">
        </childnode>
        <childnode refid="3853" relation="include">
        </childnode>
        <childnode refid="3788" relation="include">
        </childnode>
        <childnode refid="3889" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3898">
        <label>openscenario_msgs/msg/lanelet_pose.hpp</label>
      </node>
      <node id="3860">
        <label>openscenario_msgs/msg/entity_trajectory.hpp</label>
      </node>
      <node id="3801">
        <label>lanelet2_core/geometry/Lanelet.h</label>
      </node>
      <node id="3863">
        <label>traffic_simulator/behavior/action_node.hpp</label>
        <link refid="action__node_8hpp_source"/>
        <childnode refid="3862" relation="include">
        </childnode>
        <childnode refid="3864" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3794" relation="include">
        </childnode>
        <childnode refid="3796" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3788" relation="include">
        </childnode>
        <childnode refid="3798" relation="include">
        </childnode>
        <childnode refid="3865" relation="include">
        </childnode>
        <childnode refid="3821" relation="include">
        </childnode>
        <childnode refid="3837" relation="include">
        </childnode>
        <childnode refid="3832" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3838">
        <label>autoware_perception_msgs/msg/traffic_light_state_array.hpp</label>
      </node>
      <node id="3846">
        <label>tf2_ros/static_transform_broadcaster.h</label>
      </node>
      <node id="3897">
        <label>openscenario_msgs/msg/action_status.hpp</label>
      </node>
      <node id="3853">
        <label>traffic_simulator/behavior/target_speed_planner.hpp</label>
        <link refid="target__speed__planner_8hpp_source"/>
        <childnode refid="3790" relation="include">
        </childnode>
      </node>
      <node id="3792">
        <label>openscenario_msgs/msg/entity_status.hpp</label>
      </node>
      <node id="3872">
        <label>pugixml.hpp</label>
      </node>
      <node id="3834">
        <label>autoware_perception_msgs/msg/lamp_state.hpp</label>
      </node>
      <node id="3869">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="3826">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="3868">
        <label>openscenario_msgs.pb.h</label>
      </node>
      <node id="3795">
        <label>openscenario_msgs/msg/vehicle_parameters.hpp</label>
      </node>
      <node id="3895">
        <label>cmath</label>
      </node>
      <node id="3777">
        <label>cassert</label>
      </node>
      <node id="3903">
        <label>traffic_simulator/simulation_clock/simulation_clock.hpp</label>
        <link refid="simulation__clock_8hpp_source"/>
        <childnode refid="3768" relation="include">
        </childnode>
        <childnode refid="3779" relation="include">
        </childnode>
      </node>
      <node id="3771">
        <label>stdexcept</label>
      </node>
      <node id="3876">
        <label>eigen3/Eigen/LU</label>
      </node>
      <node id="3848">
        <label>openscenario_msgs/msg/entity_status_with_trajectory_array.hpp</label>
      </node>
      <node id="3828">
        <label>openscenario_msgs/msg/hermite_curve.hpp</label>
      </node>
      <node id="3855">
        <label>behaviortree_cpp_v3/bt_factory.h</label>
      </node>
      <node id="3772">
        <label>string</label>
      </node>
      <node id="3794">
        <label>openscenario_msgs/msg/obstacle.hpp</label>
      </node>
      <node id="3816">
        <label>lanelet2_extension_psim/utility/utilities.hpp</label>
      </node>
      <node id="3775">
        <label>autoware_auto_msgs/msg/vehicle_control_command.hpp</label>
      </node>
      <node id="3818">
        <label>traffic_simulator/hdmap_utils/cache.hpp</label>
        <link refid="cache_8hpp_source"/>
        <childnode refid="3790" relation="include">
        </childnode>
        <childnode refid="3819" relation="include">
        </childnode>
        <childnode refid="3820" relation="include">
        </childnode>
        <childnode refid="3769" relation="include">
        </childnode>
        <childnode refid="3821" relation="include">
        </childnode>
        <childnode refid="3832" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3817">
        <label>map</label>
      </node>
      <node id="3824">
        <label>traffic_simulator/math/hermite_curve.hpp</label>
        <link refid="hermite__curve_8hpp_source"/>
        <childnode refid="3825" relation="include">
        </childnode>
        <childnode refid="3790" relation="include">
        </childnode>
        <childnode refid="3819" relation="include">
        </childnode>
        <childnode refid="3826" relation="include">
        </childnode>
        <childnode refid="3827" relation="include">
        </childnode>
        <childnode refid="3828" relation="include">
        </childnode>
        <childnode refid="3829" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3841">
        <label>traffic_simulator/color_utils/color_utils.hpp</label>
        <link refid="color__utils_8hpp_source"/>
        <childnode refid="3777" relation="include">
        </childnode>
        <childnode refid="3842" relation="include">
        </childnode>
        <childnode refid="3817" relation="include">
        </childnode>
        <childnode refid="3843" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
      </node>
      <node id="3791">
        <label>openscenario_msgs/msg/bounding_box.hpp</label>
      </node>
      <node id="3867">
        <label>traffic_simulator/entity/vehicle_parameter.hpp</label>
        <link refid="vehicle__parameter_8hpp_source"/>
        <childnode refid="3868" relation="include">
        </childnode>
        <childnode refid="3869" relation="include">
        </childnode>
        <childnode refid="3870" relation="include">
        </childnode>
        <childnode refid="3871" relation="include">
        </childnode>
        <childnode refid="3827" relation="include">
        </childnode>
        <childnode refid="3791" relation="include">
        </childnode>
        <childnode refid="3795" relation="include">
        </childnode>
        <childnode refid="3872" relation="include">
        </childnode>
        <childnode refid="3768" relation="include">
        </childnode>
        <childnode refid="3873" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
      </node>
      <node id="3768">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="3805">
        <label>lanelet2_routing/RoutingCost.h</label>
      </node>
      <node id="3858">
        <label>traffic_simulator/behavior/vehicle/lane_change_action.hpp</label>
        <link refid="lane__change__action_8hpp_source"/>
        <childnode refid="3859" relation="include">
        </childnode>
        <childnode refid="3855" relation="include">
        </childnode>
        <childnode refid="3790" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3792" relation="include">
        </childnode>
        <childnode refid="3860" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3861" relation="include">
        </childnode>
        <childnode refid="3867" relation="include">
        </childnode>
        <childnode refid="3824" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3810">
        <label>tf2_geometry_msgs/tf2_geometry_msgs.h</label>
      </node>
      <node id="3798">
        <label>traffic_simulator/hdmap_utils/hdmap_utils.hpp</label>
        <link refid="hdmap__utils_8hpp_source"/>
        <childnode refid="3799" relation="include">
        </childnode>
        <childnode refid="3800" relation="include">
        </childnode>
        <childnode refid="3801" relation="include">
        </childnode>
        <childnode refid="3802" relation="include">
        </childnode>
        <childnode refid="3803" relation="include">
        </childnode>
        <childnode refid="3804" relation="include">
        </childnode>
        <childnode refid="3805" relation="include">
        </childnode>
        <childnode refid="3806" relation="include">
        </childnode>
        <childnode refid="3807" relation="include">
        </childnode>
        <childnode refid="3808" relation="include">
        </childnode>
        <childnode refid="3809" relation="include">
        </childnode>
        <childnode refid="3810" relation="include">
        </childnode>
        <childnode refid="3811" relation="include">
        </childnode>
        <childnode refid="3784" relation="include">
        </childnode>
        <childnode refid="3790" relation="include">
        </childnode>
        <childnode refid="3812" relation="include">
        </childnode>
        <childnode refid="3813" relation="include">
        </childnode>
        <childnode refid="3814" relation="include">
        </childnode>
        <childnode refid="3815" relation="include">
        </childnode>
        <childnode refid="3816" relation="include">
        </childnode>
        <childnode refid="3817" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3792" relation="include">
        </childnode>
        <childnode refid="3768" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3818" relation="include">
        </childnode>
        <childnode refid="3824" relation="include">
        </childnode>
        <childnode refid="3833" relation="include">
        </childnode>
        <childnode refid="3832" relation="include">
        </childnode>
        <childnode refid="3831" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
        <childnode refid="3836" relation="include">
        </childnode>
      </node>
      <node id="3822">
        <label>exception</label>
      </node>
      <node id="3900">
        <label>fstream</label>
      </node>
      <node id="3892">
        <label>traffic_simulator/traffic/traffic_module_base.hpp</label>
        <link refid="traffic__module__base_8hpp_source"/>
      </node>
      <node id="3865">
        <label>traffic_simulator/helper/stop_watch.hpp</label>
        <link refid="stop__watch_8hpp_source"/>
        <childnode refid="3790" relation="include">
        </childnode>
        <childnode refid="3866" relation="include">
        </childnode>
        <childnode refid="3835" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
      </node>
      <node id="3889">
        <label>traffic_simulator/entity/pedestrian_parameter.hpp</label>
        <link refid="pedestrian__parameter_8hpp_source"/>
        <childnode refid="3869" relation="include">
        </childnode>
        <childnode refid="3870" relation="include">
        </childnode>
        <childnode refid="3871" relation="include">
        </childnode>
        <childnode refid="3827" relation="include">
        </childnode>
        <childnode refid="3885" relation="include">
        </childnode>
        <childnode refid="3872" relation="include">
        </childnode>
        <childnode refid="3768" relation="include">
        </childnode>
        <childnode refid="3873" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3867" relation="include">
        </childnode>
      </node>
      <node id="3799">
        <label>geometry_msgs/msg/vector3.h</label>
      </node>
      <node id="3827">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="3778">
        <label>openscenario_msgs/msg/driver_model.hpp</label>
      </node>
      <node id="3840">
        <label>autoware_perception_msgs/msg/traffic_light_state.hpp</label>
      </node>
      <node id="3764">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/api/api.cpp</label>
        <link refid="api_8cpp"/>
        <childnode refid="3765" relation="include">
        </childnode>
        <childnode refid="3766" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3768" relation="include">
        </childnode>
        <childnode refid="3769" relation="include">
        </childnode>
        <childnode refid="3770" relation="include">
        </childnode>
        <childnode refid="3771" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3773" relation="include">
        </childnode>
      </node>
      <node id="3804">
        <label>lanelet2_routing/Route.h</label>
      </node>
      <node id="3815">
        <label>lanelet2_extension_psim/utility/query.hpp</label>
      </node>
      <node id="3845">
        <label>traffic_simulator/entity/entity_manager.hpp</label>
        <link refid="entity__manager_8hpp_source"/>
        <childnode refid="3765" relation="include">
        </childnode>
        <childnode refid="3810" relation="include">
        </childnode>
        <childnode refid="3846" relation="include">
        </childnode>
        <childnode refid="3847" relation="include">
        </childnode>
        <childnode refid="3790" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3791" relation="include">
        </childnode>
        <childnode refid="3778" relation="include">
        </childnode>
        <childnode refid="3848" relation="include">
        </childnode>
        <childnode refid="3795" relation="include">
        </childnode>
        <childnode refid="3768" relation="include">
        </childnode>
        <childnode refid="3769" relation="include">
        </childnode>
        <childnode refid="3771" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3781" relation="include">
        </childnode>
        <childnode refid="3849" relation="include">
        </childnode>
        <childnode refid="3788" relation="include">
        </childnode>
        <childnode refid="3882" relation="include">
        </childnode>
        <childnode refid="3884" relation="include">
        </childnode>
        <childnode refid="3851" relation="include">
        </childnode>
        <childnode refid="3798" relation="include">
        </childnode>
        <childnode refid="3891" relation="include">
        </childnode>
        <childnode refid="3837" relation="include">
        </childnode>
        <childnode refid="3893" relation="include">
        </childnode>
        <childnode refid="3832" relation="include">
        </childnode>
        <childnode refid="3831" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
        <childnode refid="3836" relation="include">
        </childnode>
      </node>
      <node id="3825">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="3862">
        <label>behaviortree_cpp_v3/action_node.h</label>
      </node>
      <node id="3780">
        <label>simulation_interface/zmq_client.hpp</label>
      </node>
      <node id="3899">
        <label>traffic_simulator/metrics/metrics_manager.hpp</label>
        <link refid="metrics__manager_8hpp_source"/>
        <childnode refid="3900" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3901" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3845" relation="include">
        </childnode>
        <childnode refid="3902" relation="include">
        </childnode>
        <childnode refid="3832" relation="include">
        </childnode>
        <childnode refid="3831" relation="include">
        </childnode>
      </node>
      <node id="3814">
        <label>lanelet2_extension_psim/utility/message_conversion.hpp</label>
      </node>
      <node id="3819">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="3783">
        <label>ament_index_cpp/get_package_share_directory.hpp</label>
      </node>
      <node id="3842">
        <label>cstdio</label>
      </node>
      <node id="3864">
        <label>boost/algorithm/clamp.hpp</label>
      </node>
      <node id="3882">
        <label>traffic_simulator/entity/misc_object_entity.hpp</label>
        <link refid="misc__object__entity_8hpp_source"/>
        <childnode refid="3883" relation="include">
        </childnode>
        <childnode refid="3788" relation="include">
        </childnode>
      </node>
      <node id="3850">
        <label>concealer/autoware.hpp</label>
      </node>
      <node id="3823">
        <label>openscenario_msgs/msg/catmull_rom_spline.hpp</label>
      </node>
      <node id="3830">
        <label>vector</label>
      </node>
      <node id="3784">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="3851">
        <label>traffic_simulator/entity/vehicle_entity.hpp</label>
        <link refid="vehicle__entity_8hpp_source"/>
        <childnode refid="3778" relation="include">
        </childnode>
        <childnode refid="3795" relation="include">
        </childnode>
        <childnode refid="3796" relation="include">
        </childnode>
        <childnode refid="3768" relation="include">
        </childnode>
        <childnode refid="3852" relation="include">
        </childnode>
        <childnode refid="3853" relation="include">
        </childnode>
        <childnode refid="3854" relation="include">
        </childnode>
        <childnode refid="3858" relation="include">
        </childnode>
        <childnode refid="3788" relation="include">
        </childnode>
        <childnode refid="3867" relation="include">
        </childnode>
        <childnode refid="3790" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3872" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3789">
        <label>autoware_vehicle_msgs/msg/vehicle_command.hpp</label>
      </node>
      <node id="3831">
        <label>utility</label>
      </node>
      <node id="3776">
        <label>autoware_auto_msgs/msg/vehicle_state_command.hpp</label>
      </node>
      <node id="3887">
        <label>traffic_simulator/behavior/pedestrian/follow_lane_action.hpp</label>
        <link refid="pedestrian_2follow__lane__action_8hpp_source"/>
        <childnode refid="3859" relation="include">
        </childnode>
        <childnode refid="3855" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3792" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3888" relation="include">
        </childnode>
        <childnode refid="3889" relation="include">
        </childnode>
        <childnode refid="3798" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3873">
        <label>sstream</label>
      </node>
      <node id="3854">
        <label>traffic_simulator/behavior/vehicle/behavior_tree.hpp</label>
        <link refid="vehicle_2behavior__tree_8hpp_source"/>
        <childnode refid="3855" relation="include">
        </childnode>
        <childnode refid="3856" relation="include">
        </childnode>
        <childnode refid="3857" relation="include">
        </childnode>
        <childnode refid="3819" relation="include">
        </childnode>
        <childnode refid="3817" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3792" relation="include">
        </childnode>
        <childnode refid="3794" relation="include">
        </childnode>
        <childnode refid="3796" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3798" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3829">
        <label>traffic_simulator/math/polynomial_solver.hpp</label>
        <link refid="polynomial__solver_8hpp_source"/>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3786">
        <label>boost/range/iterator_range.hpp</label>
      </node>
      <node id="3881">
        <label>math.h</label>
      </node>
      <node id="3808">
        <label>lanelet2_traffic_rules/TrafficRulesFactory.h</label>
      </node>
      <node id="3849">
        <label>traffic_simulator/entity/ego_entity.hpp</label>
        <link refid="ego__entity_8hpp_source"/>
        <childnode refid="3782" relation="include">
        </childnode>
        <childnode refid="3784" relation="include">
        </childnode>
        <childnode refid="3790" relation="include">
        </childnode>
        <childnode refid="3850" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3793" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3781" relation="include">
        </childnode>
        <childnode refid="3851" relation="include">
        </childnode>
        <childnode refid="3874" relation="include">
        </childnode>
        <childnode refid="3878" relation="include">
        </childnode>
        <childnode refid="3832" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3821">
        <label>traffic_simulator/math/catmull_rom_spline.hpp</label>
        <link refid="catmull__rom__spline_8hpp_source"/>
        <childnode refid="3822" relation="include">
        </childnode>
        <childnode refid="3819" relation="include">
        </childnode>
        <childnode refid="3823" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3824" relation="include">
        </childnode>
        <childnode refid="3831" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3803">
        <label>lanelet2_core/primitives/LaneletSequence.h</label>
      </node>
      <node id="3870">
        <label>boost/property_tree/ptree.hpp</label>
      </node>
      <node id="3835">
        <label>iostream</label>
      </node>
      <node id="3888">
        <label>traffic_simulator/behavior/pedestrian/pedestrian_action_node.hpp</label>
        <link refid="pedestrian__action__node_8hpp_source"/>
        <childnode refid="3862" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3885" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3863" relation="include">
        </childnode>
        <childnode refid="3889" relation="include">
        </childnode>
      </node>
      <node id="3861">
        <label>traffic_simulator/behavior/vehicle/vehicle_action_node.hpp</label>
        <link refid="vehicle__action__node_8hpp_source"/>
        <childnode refid="3862" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3778" relation="include">
        </childnode>
        <childnode refid="3860" relation="include">
        </childnode>
        <childnode refid="3794" relation="include">
        </childnode>
        <childnode refid="3795" relation="include">
        </childnode>
        <childnode refid="3796" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3863" relation="include">
        </childnode>
        <childnode refid="3867" relation="include">
        </childnode>
        <childnode refid="3865" relation="include">
        </childnode>
        <childnode refid="3821" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3800">
        <label>lanelet2_core/LaneletMap.h</label>
      </node>
      <node id="3879">
        <label>deque</label>
      </node>
      <node id="3839">
        <label>traffic_simulator/traffic_lights/traffic_light.hpp</label>
        <link refid="traffic__light_8hpp_source"/>
        <childnode refid="3840" relation="include">
        </childnode>
        <childnode refid="3835" relation="include">
        </childnode>
        <childnode refid="3766" relation="include">
        </childnode>
        <childnode refid="3771" relation="include">
        </childnode>
        <childnode refid="3841" relation="include">
        </childnode>
        <childnode refid="3844" relation="include">
        </childnode>
        <childnode refid="3833" relation="include">
        </childnode>
        <childnode refid="3832" relation="include">
        </childnode>
        <childnode refid="3831" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3837">
        <label>traffic_simulator/traffic_lights/traffic_light_manager.hpp</label>
        <link refid="traffic__light__manager_8hpp_source"/>
        <childnode refid="3838" relation="include">
        </childnode>
        <childnode refid="3787" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3768" relation="include">
        </childnode>
        <childnode refid="3771" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3798" relation="include">
        </childnode>
        <childnode refid="3839" relation="include">
        </childnode>
        <childnode refid="3832" relation="include">
        </childnode>
        <childnode refid="3831" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
        <childnode refid="3836" relation="include">
        </childnode>
      </node>
      <node id="3832">
        <label>unordered_map</label>
      </node>
      <node id="3811">
        <label>autoware_auto_msgs/msg/had_map_bin.hpp</label>
      </node>
      <node id="3765">
        <label>tf2/LinearMath/Quaternion.h</label>
      </node>
      <node id="3859">
        <label>behaviortree_cpp_v3/behavior_tree.h</label>
      </node>
      <node id="3836">
        <label>visualization_msgs/msg/marker_array.hpp</label>
      </node>
      <node id="3820">
        <label>mutex</label>
      </node>
      <node id="3802">
        <label>lanelet2_core/primitives/BasicRegulatoryElements.h</label>
      </node>
      <node id="3788">
        <label>traffic_simulator/entity/entity_base.hpp</label>
        <link refid="entity__base_8hpp_source"/>
        <childnode refid="3789" relation="include">
        </childnode>
        <childnode refid="3790" relation="include">
        </childnode>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3791" relation="include">
        </childnode>
        <childnode refid="3778" relation="include">
        </childnode>
        <childnode refid="3792" relation="include">
        </childnode>
        <childnode refid="3793" relation="include">
        </childnode>
        <childnode refid="3794" relation="include">
        </childnode>
        <childnode refid="3795" relation="include">
        </childnode>
        <childnode refid="3796" relation="include">
        </childnode>
        <childnode refid="3797" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3798" relation="include">
        </childnode>
        <childnode refid="3837" relation="include">
        </childnode>
        <childnode refid="3832" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
        <childnode refid="3836" relation="include">
        </childnode>
      </node>
      <node id="3807">
        <label>lanelet2_routing/RoutingGraphContainer.h</label>
      </node>
      <node id="3866">
        <label>chrono</label>
      </node>
      <node id="3875">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="3790">
        <label>boost/optional.hpp</label>
      </node>
      <node id="3847">
        <label>tf2_ros/transform_broadcaster.h</label>
      </node>
      <node id="3896">
        <label>geometry_msgs/msg/quaternion.hpp</label>
      </node>
      <node id="3809">
        <label>tf2/LinearMath/Matrix3x3.h</label>
      </node>
      <node id="3874">
        <label>traffic_simulator/vehicle_model/sim_model_ideal.hpp</label>
        <link refid="sim__model__ideal_8hpp"/>
        <childnode refid="3875" relation="include">
        </childnode>
        <childnode refid="3876" relation="include">
        </childnode>
        <childnode refid="3835" relation="include">
        </childnode>
        <childnode refid="3877" relation="include">
        </childnode>
      </node>
      <node id="3893">
        <label>type_traits</label>
      </node>
      <node id="3901">
        <label>nlohmann/json.hpp</label>
      </node>
      <node id="3782">
        <label>algorithm</label>
      </node>
      <node id="3885">
        <label>openscenario_msgs/msg/pedestrian_parameters.hpp</label>
      </node>
      <node id="3904">
        <label>traffic_simulator/traffic/traffic_controller.hpp</label>
        <link refid="traffic__controller_8hpp"/>
        <childnode refid="3767" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
        <childnode refid="3798" relation="include">
        </childnode>
        <childnode refid="3892" relation="include">
        </childnode>
        <childnode refid="3831" relation="include">
        </childnode>
        <childnode refid="3830" relation="include">
        </childnode>
      </node>
      <node id="3774">
        <label>simulation_api_schema.pb.h</label>
      </node>
      <node id="3767">
        <label>memory</label>
      </node>
      <node id="3781">
        <label>traffic_simulator/api/configuration.hpp</label>
        <link refid="configuration_8hpp_source"/>
        <childnode refid="3782" relation="include">
        </childnode>
        <childnode refid="3783" relation="include">
        </childnode>
        <childnode refid="3784" relation="include">
        </childnode>
        <childnode refid="3785" relation="include">
        </childnode>
        <childnode refid="3786" relation="include">
        </childnode>
        <childnode refid="3787" relation="include">
        </childnode>
        <childnode refid="3769" relation="include">
        </childnode>
        <childnode refid="3772" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetraffic__simulator">traffic_simulator</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tf2/LinearMath/Quaternion.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;rclcpp/rclcpp.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;scenario_simulator_exception/exception.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;simulation_interface/conversions.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/api/api.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetraffic__simulator" kindref="compound">traffic_simulator</ref></highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>API::setVerbose(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verbose)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>metrics_manager_.setVerbose(verbose);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>entity_manager_ptr_-&gt;setVerbose(verbose);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::despawn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>entity_manager_ptr_-&gt;despawnEntity(name);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>configuration.standalone_mode)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_api_schema::DespawnEntityRequest<sp/>req;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_api_schema::DespawnEntityResponse<sp/>res;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>req.set_name(name);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>despawn_entity_client_.call(req,<sp/>res);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res.result().success();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::spawn(</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_ego,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::VehicleParameters<sp/>&amp;<sp/>params)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_ego)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>entity_manager_ptr_-&gt;entityExists(name)<sp/>and</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>entity_manager_ptr_-&gt;spawnEntity&lt;<ref refid="classtraffic__simulator_1_1entity_1_1EgoEntity" kindref="compound">traffic_simulator::entity::EgoEntity</ref>&gt;(</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/>configuration,<sp/>clock_.getStepTime(),<sp/>params))<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configuration.standalone_mode)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_api_schema::SpawnVehicleEntityRequest<sp/>req;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_api_schema::SpawnVehicleEntityResponse<sp/>res;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>req.set_is_ego(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_interface::toProto(params,<sp/>*req.mutable_parameters());</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>spawn_vehicle_entity_client_.call(req,<sp/>res);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res.result().success();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entity_manager_ptr_-&gt;spawnEntity&lt;<ref refid="classtraffic__simulator_1_1entity_1_1VehicleEntity" kindref="compound">traffic_simulator::entity::VehicleEntity</ref>&gt;(name,<sp/>params))<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configuration.standalone_mode)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_api_schema::SpawnVehicleEntityRequest<sp/>req;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_api_schema::SpawnVehicleEntityResponse<sp/>res;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>req.set_is_ego(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_interface::toProto(params,<sp/>*req.mutable_parameters());</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>spawn_vehicle_entity_client_.call(req,<sp/>res);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res.result().success();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::spawn(</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_ego,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::PedestrianParameters<sp/>&amp;<sp/>params)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_ego)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;pedestrian<sp/>should<sp/>not<sp/>be<sp/>ego&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entity_manager_ptr_-&gt;spawnEntity&lt;<ref refid="classtraffic__simulator_1_1entity_1_1PedestrianEntity" kindref="compound">traffic_simulator::entity::PedestrianEntity</ref>&gt;(</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/>params))<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configuration.standalone_mode)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>simulation_api_schema::SpawnPedestrianEntityRequest<sp/>req;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>simulation_api_schema::SpawnPedestrianEntityResponse<sp/>res;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>simulation_interface::toProto(params,<sp/>*req.mutable_parameters());</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>spawn_pedestrian_entity_client_.call(req,<sp/>res);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res.result().success();</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::spawn(</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_ego,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::MiscObjectParameters<sp/>&amp;<sp/>params)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_ego)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;misc<sp/>object<sp/>should<sp/>not<sp/>be<sp/>ego&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entity_manager_ptr_-&gt;spawnEntity&lt;<ref refid="classtraffic__simulator_1_1entity_1_1MiscObjectEntity" kindref="compound">traffic_simulator::entity::MiscObjectEntity</ref>&gt;(</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/>params))<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configuration.standalone_mode)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>simulation_api_schema::SpawnMiscObjectEntityRequest<sp/>req;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>simulation_api_schema::SpawnMiscObjectEntityResponse<sp/>res;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>simulation_interface::toProto(params,<sp/>*req.mutable_parameters());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>spawn_misc_object_entity_client_.call(req,<sp/>res);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res.result().success();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">geometry_msgs::msg::Pose<sp/>API::getEntityPose(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getEntityStatus(name);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status.pose;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">openscenario_msgs::msg::EntityStatus<sp/>API::getEntityStatus(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>entity_manager_ptr_-&gt;getEntityStatus(name);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;entity<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/>name,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>status<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status.get();</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::setEntityStatus(</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityStatus<sp/>&amp;<sp/>status)</highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity_manager_ptr_-&gt;setEntityStatus(name,<sp/>status);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::setEntityStatus(</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>reference_entity_name,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Point<sp/>&amp;<sp/>relative_position,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Vector3<sp/>&amp;<sp/>relative_rpy,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::ActionStatus<sp/>&amp;<sp/>action_status)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>relative_pose;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>relative_pose.position<sp/>=<sp/>relative_position;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>relative_pose.orientation<sp/>=<sp/>quaternion_operation::convertEulerAngleToQuaternion(relative_rpy);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setEntityStatus(name,<sp/>reference_entity_name,<sp/>relative_pose,<sp/>action_status);</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::setEntityStatus(</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>reference_entity_name,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>relative_pose,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::ActionStatus<sp/>&amp;<sp/>action_status)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pose<sp/>=<sp/>entity_manager_ptr_-&gt;getMapPose(reference_entity_name,<sp/>relative_pose);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::EntityStatus<sp/>status;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>status.time<sp/>=<sp/>clock_.getCurrentSimulationTime();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>status.pose<sp/>=<sp/>pose;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet_pose<sp/>=<sp/>entity_manager_ptr_-&gt;toLaneletPose(pose);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>status.action_status<sp/>=<sp/>action_status;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lanelet_pose)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>status.lanelet_pose_valid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>status.lanelet_pose<sp/>=<sp/>lanelet_pose.get();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>status.lanelet_pose_valid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity_manager_ptr_-&gt;setEntityStatus(name,<sp/>status);</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">boost::optional&lt;double&gt;<sp/>API::getTimeHeadway(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>to)</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entity_manager_ptr_-&gt;entityStatusSet(from)<sp/>||<sp/>!entity_manager_ptr_-&gt;entityStatusSet(to))<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>pose<sp/>=<sp/>getRelativePose(from,<sp/>to);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pose.position.x<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::EntityStatus<sp/>to_status<sp/>=<sp/>getEntityStatus(to);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>(pose.position.x<sp/>*<sp/>-1)<sp/>/<sp/>(to_status.action_status.twist.linear.x);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::isnan(ret))<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::reachPosition(</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>target_pose,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance)</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity_manager_ptr_-&gt;entityStatusSet(name)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity_manager_ptr_-&gt;reachPosition(name,<sp/>target_pose,<sp/>tolerance);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::reachPosition(</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::LaneletPose<sp/>&amp;<sp/>target_pose,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance)</highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity_manager_ptr_-&gt;entityStatusSet(name)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity_manager_ptr_-&gt;reachPosition(</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/>target_pose.lanelet_id,<sp/>target_pose.s,<sp/>target_pose.offset,<sp/>tolerance);</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::reachPosition(</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>target_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="217"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity_manager_ptr_-&gt;entityStatusSet(name)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity_manager_ptr_-&gt;entityStatusSet(target_name)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity_manager_ptr_-&gt;reachPosition(name,<sp/>target_name,<sp/>tolerance);</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::setEntityStatus(</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::LaneletPose<sp/>&amp;<sp/>lanelet_pose,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::ActionStatus<sp/>&amp;<sp/>action_status)</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::EntityStatus<sp/>status;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>status.lanelet_pose<sp/>=<sp/>lanelet_pose;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>status.lanelet_pose_valid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>status.bounding_box<sp/>=<sp/>entity_manager_ptr_-&gt;getBoundingBox(name);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>status.pose<sp/>=<sp/>entity_manager_ptr_-&gt;toMapPose(lanelet_pose);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>status.name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>status.time<sp/>=<sp/>getCurrentTime();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>status.action_status<sp/>=<sp/>action_status;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setEntityStatus(name,<sp/>status);</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::setEntityStatus(</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>map_pose,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::ActionStatus<sp/>&amp;<sp/>action_status)</highlight></codeline>
<codeline lineno="241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet_pose<sp/>=<sp/>entity_manager_ptr_-&gt;toLaneletPose(map_pose);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::EntityStatus<sp/>status;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lanelet_pose)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>status.lanelet_pose<sp/>=<sp/>lanelet_pose.get();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>status.lanelet_pose_valid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>status.pose<sp/>=<sp/>map_pose;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>status.name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>status.action_status<sp/>=<sp/>action_status;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>status.time<sp/>=<sp/>getCurrentTime();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>status.bounding_box<sp/>=<sp/>entity_manager_ptr_-&gt;getBoundingBox(name);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setEntityStatus(name,<sp/>status);</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::initialize(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>realtime_factor,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>step_time)</highlight></codeline>
<codeline lineno="258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>clock_.initialize(-1<sp/>*<sp/>configuration.initialize_duration,<sp/>step_time);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configuration.standalone_mode)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_api_schema::InitializeRequest<sp/>req;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>req.set_step_time(step_time);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>req.set_realtime_factor(realtime_factor);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_api_schema::InitializeResponse<sp/>res;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>initialize_client_.call(req,<sp/>res);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res.result().success();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::attachDetectionSensor(</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>simulation_api_schema::DetectionSensorConfiguration<sp/>sensor_configuration)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configuration.standalone_mode)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_api_schema::AttachDetectionSensorRequest<sp/>req;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_api_schema::AttachDetectionSensorResponse<sp/>res;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>*req.mutable_configuration()<sp/>=<sp/>sensor_configuration;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>attach_detection_sensor_client_.call(req,<sp/>res);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res.result().success();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::attachLidarSensor(simulation_api_schema::LidarConfiguration<sp/>lidar_configuration)</highlight></codeline>
<codeline lineno="288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configuration.standalone_mode)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_api_schema::AttachLidarSensorRequest<sp/>req;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_api_schema::AttachLidarSensorResponse<sp/>res;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>*req.mutable_configuration()<sp/>=<sp/>lidar_configuration;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>attach_lidar_sensor_client_.call(req,<sp/>res);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res.result().success();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::updateSensorFrame()</highlight></codeline>
<codeline lineno="301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configuration.standalone_mode)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_api_schema::UpdateSensorFrameRequest<sp/>req;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>req.set_current_time(clock_.getCurrentSimulationTime());</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_interface::toProto(</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clock_.getCurrentRosTimeAsMsg().clock,<sp/>*req.mutable_current_ros_time());</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_api_schema::UpdateSensorFrameResponse<sp/>res;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>update_sensor_frame_client_.call(req,<sp/>res);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res.result().success();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::updateEntityStatusInSim()</highlight></codeline>
<codeline lineno="316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>simulation_api_schema::UpdateEntityStatusRequest<sp/>req;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entity_manager_ptr_-&gt;getNumberOfEgo()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_interface::toProto(</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entity_manager_ptr_-&gt;getVehicleCommand(entity_manager_ptr_-&gt;getEgoName()),</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*req.mutable_vehicle_command());</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ego_status_before_update<sp/>=</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entity_manager_ptr_-&gt;getEntityStatusBeforeUpdate(entity_manager_ptr_-&gt;getEgoName());</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ego_status_before_update)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>req.set_ego_entity_status_before_update_is_empty(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>simulation_interface::toProto(</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ego_status_before_update.get(),<sp/>*req.mutable_ego_entity_status_before_update());</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>req.set_ego_entity_status_before_update_is_empty(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>names<sp/>=<sp/>entity_manager_ptr_-&gt;getEntityNames();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name<sp/>:<sp/>names)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>entity_manager_ptr_-&gt;getEntityStatus(name);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>openscenario_msgs::EntityStatus<sp/>proto;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status.get().name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>simulation_interface::toProto(status.get(),<sp/>proto);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*req.add_status()<sp/>=<sp/>proto;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>simulation_api_schema::UpdateEntityStatusResponse<sp/>res;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>update_entity_status_client_.call(req,<sp/>res);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>:<sp/>res.status())<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity_status<sp/>=<sp/>entity_manager_ptr_-&gt;getEntityStatus(status.name());</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entity_status)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>openscenario_msgs::msg::EntityStatus<sp/>status_msg;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>status_msg<sp/>=<sp/>entity_status.get();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Pose<sp/>pose;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_interface::toMsg(status.pose(),<sp/>pose);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>status_msg.pose<sp/>=<sp/>pose;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet_pose<sp/>=<sp/>entity_manager_ptr_-&gt;toLaneletPose(pose);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lanelet_pose)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status_msg.lanelet_pose_valid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status_msg.lanelet_pose<sp/>=<sp/>lanelet_pose.get();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status_msg.lanelet_pose_valid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status_msg.lanelet_pose<sp/>=<sp/>openscenario_msgs::msg::LaneletPose();</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_interface::toMsg(status.action_status().twist(),<sp/>status_msg.action_status.twist);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_interface::toMsg(status.action_status().accel(),<sp/>status_msg.action_status.accel);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>entity_manager_ptr_-&gt;setEntityStatus(status.name(),<sp/>status_msg);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res.result().success();</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>API::updateFrame()</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>boost::optional&lt;openscenario_msgs::msg::EntityStatus&gt;<sp/>ego_status_before_update<sp/>=<sp/>boost::none;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>entity_manager_ptr_-&gt;update(clock_.getCurrentSimulationTime(),<sp/>clock_.getStepTime());</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>traffic_controller_ptr_-&gt;execute();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>configuration.standalone_mode)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_api_schema::UpdateFrameRequest<sp/>req;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>req.set_current_time(clock_.getCurrentSimulationTime());</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_interface::toProto(</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clock_.getCurrentRosTimeAsMsg().clock,<sp/>*req.mutable_current_ros_time());</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>simulation_api_schema::UpdateFrameResponse<sp/>res;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>update_frame_client_.call(req,<sp/>res);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!res.result().success())<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>entity_manager_ptr_-&gt;broadcastEntityTransform();</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_.update();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_pub_-&gt;publish(clock_.getCurrentRosTimeAsMsg());</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>metrics_manager_.calculate();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!updateEntityStatusInSim())<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>updateSensorFrame();</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>entity_manager_ptr_-&gt;broadcastEntityTransform();</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_.update();</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_pub_-&gt;publish(clock_.getCurrentRosTimeAsMsg());</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>metrics_manager_.calculate();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>API::requestLaneChange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int64_t<sp/>&amp;<sp/>lanelet_id)</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>entity_manager_ptr_-&gt;requestLaneChange(name,<sp/>lanelet_id);</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>API::requestLaneChange(</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>traffic_simulator::entity::Direction<sp/>&amp;<sp/>direction)</highlight></codeline>
<codeline lineno="409"><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>entity_manager_ptr_-&gt;requestLaneChange(name,<sp/>direction);</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>traffic_simulator</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/api/api.cpp"/>
  </compounddef>
</doxygen>
