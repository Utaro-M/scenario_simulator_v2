<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="traffic__signal__controller_8hpp" kind="file" language="C++">
    <compoundname>traffic_signal_controller.hpp</compoundname>
    <includes refid="circular__iterator_8hpp" local="no">openscenario_interpreter/iterator/circular_iterator.hpp</includes>
    <includes refid="scope_8hpp" local="no">openscenario_interpreter/scope.hpp</includes>
    <includes refid="double_8hpp" local="no">openscenario_interpreter/syntax/double.hpp</includes>
    <includes refid="phase_8hpp" local="no">openscenario_interpreter/syntax/phase.hpp</includes>
    <includes refid="string_8hpp" local="no">openscenario_interpreter/syntax/string.hpp</includes>
    <includedby refid="traffic__signal__controller__action_8hpp" local="no">/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/traffic_signal_controller_action.hpp</includedby>
    <includedby refid="traffic__signal__controller__condition_8hpp" local="no">/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/traffic_signal_controller_condition.hpp</includedby>
    <includedby refid="traffic__signals_8hpp" local="no">/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/traffic_signals.hpp</includedby>
    <incdepgraph>
      <node id="13355">
        <label>list</label>
      </node>
      <node id="13352">
        <label>scenario_simulator_exception/exception.hpp</label>
      </node>
      <node id="13335">
        <label>boost/algorithm/string.hpp</label>
      </node>
      <node id="13346">
        <label>iomanip</label>
      </node>
      <node id="13342">
        <label>functional</label>
      </node>
      <node id="13337">
        <label>limits</label>
      </node>
      <node id="13332">
        <label>iterator</label>
      </node>
      <node id="13374">
        <label>openscenario_interpreter/type_traits/has_stream_output_operator.hpp</label>
        <link refid="has__stream__output__operator_8hpp_source"/>
        <childnode refid="13344" relation="include">
        </childnode>
        <childnode refid="13360" relation="include">
        </childnode>
      </node>
      <node id="13378">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="13349">
        <label>openscenario_interpreter/utility/demangle.hpp</label>
        <link refid="demangle_8hpp_source"/>
        <childnode refid="13350" relation="include">
        </childnode>
        <childnode refid="13351" relation="include">
        </childnode>
      </node>
      <node id="13398">
        <label>openscenario_interpreter/syntax/traffic_signal_state.hpp</label>
        <link refid="traffic__signal__state_8hpp_source"/>
        <childnode refid="13399" relation="include">
        </childnode>
        <childnode refid="13340" relation="include">
        </childnode>
        <childnode refid="13401" relation="include">
        </childnode>
        <childnode refid="13404" relation="include">
        </childnode>
        <childnode refid="13382" relation="include">
        </childnode>
      </node>
      <node id="13339">
        <label>openscenario_interpreter/syntax/entity_ref.hpp</label>
        <link refid="entity__ref_8hpp_source"/>
        <childnode refid="13340" relation="include">
        </childnode>
        <childnode refid="13367" relation="include">
        </childnode>
      </node>
      <node id="13401">
        <label>openscenario_interpreter/syntax/arrow.hpp</label>
        <link refid="arrow_8hpp_source"/>
        <childnode refid="13402" relation="include">
        </childnode>
        <childnode refid="13344" relation="include">
        </childnode>
        <childnode refid="13403" relation="include">
        </childnode>
      </node>
      <node id="13363">
        <label>openscenario_interpreter/type_traits/if_has_member_function_description.hpp</label>
        <link refid="if__has__member__function__description_8hpp_source"/>
        <childnode refid="13364" relation="include">
        </childnode>
      </node>
      <node id="13390">
        <label>pugixml.hpp</label>
      </node>
      <node id="13354">
        <label>openscenario_interpreter/object.hpp</label>
        <link refid="object_8hpp_source"/>
        <childnode refid="13355" relation="include">
        </childnode>
        <childnode refid="13356" relation="include">
        </childnode>
        <childnode refid="13333" relation="include">
        </childnode>
        <childnode refid="13367" relation="include">
        </childnode>
      </node>
      <node id="13356">
        <label>openscenario_interpreter/expression.hpp</label>
        <link refid="expression_8hpp_source"/>
        <childnode refid="13357" relation="include">
        </childnode>
      </node>
      <node id="13331">
        <label>openscenario_interpreter/iterator/circular_iterator.hpp</label>
        <link refid="circular__iterator_8hpp_source"/>
        <childnode refid="13332" relation="include">
        </childnode>
        <childnode refid="13333" relation="include">
        </childnode>
      </node>
      <node id="13353">
        <label>stdexcept</label>
      </node>
      <node id="13362">
        <label>openscenario_interpreter/type_traits/has_member_function_current_state.hpp</label>
        <link refid="has__member__function__current__state_8hpp_source"/>
        <childnode refid="13360" relation="include">
        </childnode>
      </node>
      <node id="13380">
        <label>openscenario_interpreter/syntax/integer.hpp</label>
        <link refid="integer_8hpp_source"/>
        <childnode refid="13378" relation="include">
        </childnode>
        <childnode refid="13347" relation="include">
        </childnode>
        <childnode refid="13381" relation="include">
        </childnode>
        <childnode refid="13350" relation="include">
        </childnode>
      </node>
      <node id="13381">
        <label>std_msgs/msg/int64.hpp</label>
      </node>
      <node id="13334">
        <label>openscenario_interpreter/scope.hpp</label>
        <link refid="scope_8hpp_source"/>
        <childnode refid="13335" relation="include">
        </childnode>
        <childnode refid="13336" relation="include">
        </childnode>
        <childnode refid="13337" relation="include">
        </childnode>
        <childnode refid="13338" relation="include">
        </childnode>
        <childnode refid="13339" relation="include">
        </childnode>
        <childnode refid="13352" relation="include">
        </childnode>
        <childnode refid="13392" relation="include">
        </childnode>
        <childnode refid="13367" relation="include">
        </childnode>
        <childnode refid="13393" relation="include">
        </childnode>
      </node>
      <node id="13350">
        <label>string</label>
      </node>
      <node id="13377">
        <label>openscenario_interpreter/syntax/double.hpp</label>
        <link refid="double_8hpp_source"/>
        <childnode refid="13378" relation="include">
        </childnode>
        <childnode refid="13337" relation="include">
        </childnode>
        <childnode refid="13347" relation="include">
        </childnode>
        <childnode refid="13379" relation="include">
        </childnode>
        <childnode refid="13350" relation="include">
        </childnode>
      </node>
      <node id="13403">
        <label>traffic_simulator/traffic_lights/traffic_light_state.hpp</label>
      </node>
      <node id="13360">
        <label>openscenario_interpreter/type_traits/void_t.hpp</label>
        <link refid="void__t_8hpp_source"/>
        <childnode refid="13333" relation="include">
        </childnode>
      </node>
      <node id="13357">
        <label>openscenario_interpreter/pointer.hpp</label>
        <link refid="pointer_8hpp_source"/>
        <childnode refid="13338" relation="include">
        </childnode>
        <childnode refid="13347" relation="include">
        </childnode>
        <childnode refid="13358" relation="include">
        </childnode>
        <childnode refid="13361" relation="include">
        </childnode>
        <childnode refid="13363" relation="include">
        </childnode>
        <childnode refid="13365" relation="include">
        </childnode>
        <childnode refid="13368" relation="include">
        </childnode>
        <childnode refid="13370" relation="include">
        </childnode>
        <childnode refid="13376" relation="include">
        </childnode>
        <childnode refid="13351" relation="include">
        </childnode>
        <childnode refid="13367" relation="include">
        </childnode>
      </node>
      <node id="13371">
        <label>openscenario_interpreter/console/escape_sequence.hpp</label>
        <link refid="escape__sequence_8hpp_source"/>
        <childnode refid="13372" relation="include">
        </childnode>
        <childnode refid="13350" relation="include">
        </childnode>
      </node>
      <node id="13391">
        <label>regex</label>
      </node>
      <node id="13368">
        <label>openscenario_interpreter/type_traits/if_has_member_function_start.hpp</label>
        <link refid="if__has__member__function__start_8hpp_source"/>
        <childnode refid="13369" relation="include">
        </childnode>
      </node>
      <node id="13397">
        <label>openscenario_interpreter/type_traits/must_be_default_constructible.hpp</label>
        <link refid="must__be__default__constructible_8hpp_source"/>
        <childnode refid="13347" relation="include">
        </childnode>
        <childnode refid="13333" relation="include">
        </childnode>
      </node>
      <node id="13382">
        <label>openscenario_interpreter/syntax/string.hpp</label>
        <link refid="string_8hpp_source"/>
        <childnode refid="13350" relation="include">
        </childnode>
      </node>
      <node id="13400">
        <label>traffic_simulator/api/api.hpp</label>
      </node>
      <node id="13348">
        <label>exception</label>
      </node>
      <node id="13389">
        <label>ostream</label>
      </node>
      <node id="13386">
        <label>std_msgs/msg/u_int16.hpp</label>
      </node>
      <node id="13364">
        <label>openscenario_interpreter/type_traits/has_member_function_description.hpp</label>
        <link refid="has__member__function__description_8hpp_source"/>
        <childnode refid="13360" relation="include">
        </childnode>
      </node>
      <node id="13347">
        <label>openscenario_interpreter/error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="13348" relation="include">
        </childnode>
        <childnode refid="13346" relation="include">
        </childnode>
        <childnode refid="13349" relation="include">
        </childnode>
        <childnode refid="13352" relation="include">
        </childnode>
        <childnode refid="13353" relation="include">
        </childnode>
      </node>
      <node id="13404">
        <label>openscenario_interpreter/syntax/color.hpp</label>
        <link refid="color_8hpp_source"/>
        <childnode refid="13402" relation="include">
        </childnode>
        <childnode refid="13344" relation="include">
        </childnode>
        <childnode refid="13403" relation="include">
        </childnode>
      </node>
      <node id="13365">
        <label>openscenario_interpreter/type_traits/if_has_member_function_evaluate.hpp</label>
        <link refid="if__has__member__function__evaluate_8hpp_source"/>
        <childnode refid="13366" relation="include">
        </childnode>
        <childnode refid="13367" relation="include">
        </childnode>
      </node>
      <node id="13343">
        <label>openscenario_interpreter/syntax/parameter_type.hpp</label>
        <link refid="parameter__type_8hpp_source"/>
        <childnode refid="13344" relation="include">
        </childnode>
        <childnode refid="13345" relation="include">
        </childnode>
        <childnode refid="13377" relation="include">
        </childnode>
        <childnode refid="13380" relation="include">
        </childnode>
        <childnode refid="13382" relation="include">
        </childnode>
        <childnode refid="13383" relation="include">
        </childnode>
        <childnode refid="13385" relation="include">
        </childnode>
      </node>
      <node id="13340">
        <label>openscenario_interpreter/reader/attribute.hpp</label>
        <link refid="attribute_8hpp_source"/>
        <childnode refid="13341" relation="include">
        </childnode>
        <childnode refid="13342" relation="include">
        </childnode>
        <childnode refid="13343" relation="include">
        </childnode>
        <childnode refid="13387" relation="include">
        </childnode>
        <childnode refid="13388" relation="include">
        </childnode>
        <childnode refid="13391" relation="include">
        </childnode>
        <childnode refid="13350" relation="include">
        </childnode>
        <childnode refid="13392" relation="include">
        </childnode>
      </node>
      <node id="13399">
        <label>openscenario_interpreter/procedure.hpp</label>
        <link refid="procedure_8hpp_source"/>
        <childnode refid="13337" relation="include">
        </childnode>
        <childnode refid="13338" relation="include">
        </childnode>
        <childnode refid="13347" relation="include">
        </childnode>
        <childnode refid="13400" relation="include">
        </childnode>
        <childnode refid="13367" relation="include">
        </childnode>
      </node>
      <node id="13341">
        <label>ament_index_cpp/get_package_share_directory.hpp</label>
      </node>
      <node id="13351">
        <label>typeinfo</label>
      </node>
      <node id="13369">
        <label>openscenario_interpreter/type_traits/has_member_function_start.hpp</label>
        <link refid="has__member__function__start_8hpp_source"/>
        <childnode refid="13360" relation="include">
        </childnode>
      </node>
      <node id="13379">
        <label>std_msgs/msg/float64.hpp</label>
      </node>
      <node id="13361">
        <label>openscenario_interpreter/type_traits/if_has_member_function_current_state.hpp</label>
        <link refid="if__has__member__function__current__state_8hpp_source"/>
        <childnode refid="13347" relation="include">
        </childnode>
        <childnode refid="13362" relation="include">
        </childnode>
      </node>
      <node id="13359">
        <label>openscenario_interpreter/type_traits/has_member_function_accomplished.hpp</label>
        <link refid="has__member__function__accomplished_8hpp_source"/>
        <childnode refid="13360" relation="include">
        </childnode>
      </node>
      <node id="13383">
        <label>openscenario_interpreter/syntax/unsigned_integer.hpp</label>
        <link refid="unsigned__integer_8hpp_source"/>
        <childnode refid="13378" relation="include">
        </childnode>
        <childnode refid="13347" relation="include">
        </childnode>
        <childnode refid="13384" relation="include">
        </childnode>
        <childnode refid="13350" relation="include">
        </childnode>
      </node>
      <node id="13373">
        <label>unistd.h</label>
      </node>
      <node id="13393">
        <label>vector</label>
      </node>
      <node id="13345">
        <label>openscenario_interpreter/syntax/boolean.hpp</label>
        <link refid="boolean_8hpp_source"/>
        <childnode refid="13346" relation="include">
        </childnode>
        <childnode refid="13344" relation="include">
        </childnode>
        <childnode refid="13347" relation="include">
        </childnode>
        <childnode refid="13354" relation="include">
        </childnode>
        <childnode refid="13350" relation="include">
        </childnode>
      </node>
      <node id="13336">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="13388">
        <label>openscenario_interpreter/utility/pugi_extension.hpp</label>
        <link refid="pugi__extension_8hpp_source"/>
        <childnode refid="13389" relation="include">
        </childnode>
        <childnode refid="13390" relation="include">
        </childnode>
      </node>
      <node id="13367">
        <label>utility</label>
      </node>
      <node id="13387">
        <label>openscenario_interpreter/utility/highlighter.hpp</label>
        <link refid="highlighter_8hpp_source"/>
        <childnode refid="13344" relation="include">
        </childnode>
        <childnode refid="13374" relation="include">
        </childnode>
        <childnode refid="13350" relation="include">
        </childnode>
        <childnode refid="13367" relation="include">
        </childnode>
      </node>
      <node id="13396">
        <label>openscenario_interpreter/iterator/size.hpp</label>
        <link refid="size_8hpp_source"/>
        <childnode refid="13332" relation="include">
        </childnode>
      </node>
      <node id="13366">
        <label>openscenario_interpreter/type_traits/has_member_function_evaluate.hpp</label>
        <link refid="has__member__function__evaluate_8hpp_source"/>
        <childnode refid="13360" relation="include">
        </childnode>
      </node>
      <node id="13330">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/traffic_signal_controller.hpp</label>
        <link refid="traffic__signal__controller_8hpp"/>
        <childnode refid="13331" relation="include">
        </childnode>
        <childnode refid="13334" relation="include">
        </childnode>
        <childnode refid="13377" relation="include">
        </childnode>
        <childnode refid="13394" relation="include">
        </childnode>
        <childnode refid="13382" relation="include">
        </childnode>
      </node>
      <node id="13394">
        <label>openscenario_interpreter/syntax/phase.hpp</label>
        <link refid="phase_8hpp_source"/>
        <childnode refid="13395" relation="include">
        </childnode>
        <childnode refid="13377" relation="include">
        </childnode>
        <childnode refid="13382" relation="include">
        </childnode>
        <childnode refid="13398" relation="include">
        </childnode>
      </node>
      <node id="13344">
        <label>iostream</label>
      </node>
      <node id="13384">
        <label>std_msgs/msg/u_int64.hpp</label>
      </node>
      <node id="13392">
        <label>unordered_map</label>
      </node>
      <node id="13402">
        <label>boost/optional.hpp</label>
      </node>
      <node id="13395">
        <label>openscenario_interpreter/reader/element.hpp</label>
        <link refid="element_8hpp_source"/>
        <childnode refid="13342" relation="include">
        </childnode>
        <childnode refid="13332" relation="include">
        </childnode>
        <childnode refid="13337" relation="include">
        </childnode>
        <childnode refid="13396" relation="include">
        </childnode>
        <childnode refid="13354" relation="include">
        </childnode>
        <childnode refid="13397" relation="include">
        </childnode>
        <childnode refid="13388" relation="include">
        </childnode>
        <childnode refid="13350" relation="include">
        </childnode>
        <childnode refid="13392" relation="include">
        </childnode>
        <childnode refid="13367" relation="include">
        </childnode>
      </node>
      <node id="13358">
        <label>openscenario_interpreter/type_traits/if_has_member_function_accomplished.hpp</label>
        <link refid="if__has__member__function__accomplished_8hpp_source"/>
        <childnode refid="13359" relation="include">
        </childnode>
      </node>
      <node id="13370">
        <label>openscenario_interpreter/type_traits/if_has_stream_output_operator.hpp</label>
        <link refid="if__has__stream__output__operator_8hpp_source"/>
        <childnode refid="13371" relation="include">
        </childnode>
        <childnode refid="13374" relation="include">
        </childnode>
        <childnode refid="13349" relation="include">
        </childnode>
        <childnode refid="13375" relation="include">
        </childnode>
      </node>
      <node id="13333">
        <label>type_traits</label>
      </node>
      <node id="13372">
        <label>openscenario_interpreter/console/is_console.hpp</label>
        <link refid="is__console_8hpp_source"/>
        <childnode refid="13373" relation="include">
        </childnode>
        <childnode refid="13344" relation="include">
        </childnode>
      </node>
      <node id="13385">
        <label>openscenario_interpreter/syntax/unsigned_short.hpp</label>
        <link refid="unsigned__short_8hpp_source"/>
        <childnode refid="13378" relation="include">
        </childnode>
        <childnode refid="13344" relation="include">
        </childnode>
        <childnode refid="13347" relation="include">
        </childnode>
        <childnode refid="13386" relation="include">
        </childnode>
        <childnode refid="13350" relation="include">
        </childnode>
      </node>
      <node id="13375">
        <label>openscenario_interpreter/utility/indent.hpp</label>
        <link refid="indent_8hpp_source"/>
        <childnode refid="13344" relation="include">
        </childnode>
        <childnode refid="13350" relation="include">
        </childnode>
      </node>
      <node id="13338">
        <label>memory</label>
      </node>
      <node id="13376">
        <label>openscenario_interpreter/utility/pair.hpp</label>
        <link refid="pair_8hpp_source"/>
        <childnode refid="13367" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="13413">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/maneuver_group.hpp</label>
        <link refid="maneuver__group_8hpp_source"/>
        <childnode refid="13414" relation="include">
        </childnode>
      </node>
      <node id="13410">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/action.hpp</label>
        <link refid="action_8hpp_source"/>
        <childnode refid="13411" relation="include">
        </childnode>
        <childnode refid="13421" relation="include">
        </childnode>
      </node>
      <node id="13406">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/traffic_signal_controller_action.hpp</label>
        <link refid="traffic__signal__controller__action_8hpp_source"/>
        <childnode refid="13407" relation="include">
        </childnode>
      </node>
      <node id="13424">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/by_value_condition.hpp</label>
        <link refid="by__value__condition_8hpp_source"/>
        <childnode refid="13425" relation="include">
        </childnode>
      </node>
      <node id="13426">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/condition_group.hpp</label>
        <link refid="condition__group_8hpp_source"/>
        <childnode refid="13427" relation="include">
        </childnode>
      </node>
      <node id="13421">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/init_actions.hpp</label>
        <link refid="init__actions_8hpp_source"/>
        <childnode refid="13422" relation="include">
        </childnode>
      </node>
      <node id="13425">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/condition.hpp</label>
        <link refid="condition_8hpp_source"/>
        <childnode refid="13426" relation="include">
        </childnode>
      </node>
      <node id="13416">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/storyboard.hpp</label>
        <link refid="storyboard_8hpp_source"/>
        <childnode refid="13417" relation="include">
        </childnode>
      </node>
      <node id="13420">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/openscenario_interpreter.hpp</label>
        <link refid="openscenario__interpreter_8hpp_source"/>
      </node>
      <node id="13408">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/infrastructure_action.hpp</label>
        <link refid="infrastructure__action_8hpp_source"/>
        <childnode refid="13409" relation="include">
        </childnode>
      </node>
      <node id="13423">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/traffic_signal_controller_condition.hpp</label>
        <link refid="traffic__signal__controller__condition_8hpp_source"/>
        <childnode refid="13424" relation="include">
        </childnode>
      </node>
      <node id="13411">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/event.hpp</label>
        <link refid="event_8hpp_source"/>
        <childnode refid="13412" relation="include">
        </childnode>
      </node>
      <node id="13409">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/global_action.hpp</label>
        <link refid="global__action_8hpp_source"/>
        <childnode refid="13410" relation="include">
        </childnode>
      </node>
      <node id="13429">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/road_network.hpp</label>
        <link refid="road__network_8hpp_source"/>
        <childnode refid="13417" relation="include">
        </childnode>
      </node>
      <node id="13414">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/act.hpp</label>
        <link refid="act_8hpp_source"/>
        <childnode refid="13415" relation="include">
        </childnode>
      </node>
      <node id="13419">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/openscenario.hpp</label>
        <link refid="openscenario_8hpp_source"/>
        <childnode refid="13420" relation="include">
        </childnode>
      </node>
      <node id="13418">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/open_scenario_category.hpp</label>
        <link refid="open__scenario__category_8hpp_source"/>
        <childnode refid="13419" relation="include">
        </childnode>
      </node>
      <node id="13422">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/init.hpp</label>
        <link refid="init_8hpp_source"/>
        <childnode refid="13416" relation="include">
        </childnode>
      </node>
      <node id="13405">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/traffic_signal_controller.hpp</label>
        <link refid="traffic__signal__controller_8hpp"/>
        <childnode refid="13406" relation="include">
        </childnode>
        <childnode refid="13423" relation="include">
        </childnode>
        <childnode refid="13428" relation="include">
        </childnode>
      </node>
      <node id="13415">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/story.hpp</label>
        <link refid="story_8hpp_source"/>
        <childnode refid="13416" relation="include">
        </childnode>
      </node>
      <node id="13407">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/traffic_signal_action.hpp</label>
        <link refid="traffic__signal__action_8hpp_source"/>
        <childnode refid="13408" relation="include">
        </childnode>
      </node>
      <node id="13412">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/maneuver.hpp</label>
        <link refid="maneuver_8hpp_source"/>
        <childnode refid="13413" relation="include">
        </childnode>
      </node>
      <node id="13417">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/scenario_definition.hpp</label>
        <link refid="scenario__definition_8hpp_source"/>
        <childnode refid="13418" relation="include">
        </childnode>
      </node>
      <node id="13428">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/traffic_signals.hpp</label>
        <link refid="traffic__signals_8hpp_source"/>
        <childnode refid="13429" relation="include">
        </childnode>
      </node>
      <node id="13427">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/trigger.hpp</label>
        <link refid="trigger_8hpp_source"/>
        <childnode refid="13411" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structopenscenario__interpreter_1_1syntax_1_1TrafficSignalController" prot="public">openscenario_interpreter::syntax::TrafficSignalController</innerclass>
    <innernamespace refid="namespaceopenscenario__interpreter">openscenario_interpreter</innernamespace>
    <innernamespace refid="namespaceopenscenario__interpreter_1_1syntax">openscenario_interpreter::syntax</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPENSCENARIO_INTERPRETER__SYNTAX__TRAFFIC_SIGNAL_CONTROLLER_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPENSCENARIO_INTERPRETER__SYNTAX__TRAFFIC_SIGNAL_CONTROLLER_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openscenario_interpreter/iterator/circular_iterator.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openscenario_interpreter/scope.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openscenario_interpreter/syntax/double.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openscenario_interpreter/syntax/phase.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openscenario_interpreter/syntax/string.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceopenscenario__interpreter" kindref="compound">openscenario_interpreter</ref></highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">syntax</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----<sp/>TrafficSignalController<sp/>------------------------------------------------</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/>&lt;xsd:complexType<sp/>name=&quot;TrafficSignalController&quot;&gt;</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&lt;xsd:sequence&gt;</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>&lt;xsd:element<sp/>name=&quot;Phase&quot;<sp/>minOccurs=&quot;0&quot;<sp/>maxOccurs=&quot;unbounded&quot;<sp/>type=&quot;Phase&quot;/&gt;</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&lt;/xsd:sequence&gt;</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&lt;xsd:attribute<sp/>name=&quot;name&quot;<sp/>type=&quot;String&quot;<sp/>use=&quot;required&quot;/&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&lt;xsd:attribute<sp/>name=&quot;delay&quot;<sp/>type=&quot;Double&quot;<sp/>use=&quot;optional&quot;/&gt;</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>&lt;xsd:attribute<sp/>name=&quot;reference&quot;<sp/>type=&quot;String&quot;<sp/>use=&quot;optional&quot;/&gt;</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>&lt;/xsd:complexType&gt;</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>--------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="structopenscenario__interpreter_1_1syntax_1_1TrafficSignalController" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopenscenario__interpreter_1_1syntax_1_1TrafficSignalController" kindref="compound">TrafficSignalController</ref></highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>----<sp/>NOTE<sp/>-----------------------------------------------------------------</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>ID<sp/>of<sp/>the<sp/>traffic<sp/>signal<sp/>controller<sp/>in<sp/>the<sp/>road<sp/>network.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/>*<sp/>------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>name;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>----<sp/>NOTE<sp/>-----------------------------------------------------------------</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>The<sp/>delay<sp/>to<sp/>the<sp/>controller<sp/>in<sp/>the<sp/>reference<sp/>property.<sp/>A<sp/>controller</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>having<sp/>a<sp/>delay<sp/>to<sp/>another<sp/>one<sp/>means<sp/>that<sp/>its<sp/>first<sp/>phase<sp/>virtually<sp/>starts</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>delaytime<sp/>seconds<sp/>after<sp/>the<sp/>start<sp/>of<sp/>the<sp/>reference&apos;s<sp/>first<sp/>phase.<sp/>This</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>can<sp/>be<sp/>used<sp/>to<sp/>define<sp/>a<sp/>progressive<sp/>signal<sp/>system,<sp/>but<sp/>only<sp/>makes<sp/>sense,</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>if<sp/>the<sp/>total<sp/>times<sp/>of<sp/>all<sp/>connected<sp/>controllers<sp/>are<sp/>the<sp/>same.<sp/>If<sp/>delay<sp/>is</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>set,<sp/>reference<sp/>is<sp/>required.<sp/>Unit:<sp/>s;<sp/>Range:<sp/>[0..inf[.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>CURRENTLY,<sp/>IGNORED!!!</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/>*<sp/>------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structopenscenario__interpreter_1_1syntax_1_1Double" kindref="compound">Double</ref><sp/>delay;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>----<sp/>NOTE<sp/>-----------------------------------------------------------------</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>A<sp/>reference<sp/>(ID)<sp/>to<sp/>the<sp/>connected<sp/>controller<sp/>in<sp/>the<sp/>road<sp/>network.<sp/>If</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>reference<sp/>is<sp/>set,<sp/>a<sp/>delay<sp/>is<sp/>required.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>CURRENTLY,<sp/>IGNORED!!!</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/>*<sp/>------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>reference;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>----<sp/>NOTE<sp/>-----------------------------------------------------------------</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>Phases<sp/>of<sp/>a<sp/>TrafficSignalController.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/>*<sp/>------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>std::list&lt;Phase&gt;<sp/>phases;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>CircularIterator&lt;std::list&lt;Phase&gt;&gt;<sp/>current_phase;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>boost::optional&lt;decltype(getCurrentTime())&gt;<sp/>change_to_begin_time;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>decltype(getCurrentTime())<sp/>current_phase_started_at;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;TrafficSignalController&gt;&gt;<sp/>observers;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopenscenario__interpreter_1_1syntax_1_1TrafficSignalControllerAction" kindref="compound">TrafficSignalControllerAction</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopenscenario__interpreter_1_1syntax_1_1TrafficSignals" kindref="compound">TrafficSignals</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structopenscenario__interpreter_1_1syntax_1_1TrafficSignalController" kindref="compound">TrafficSignalController</ref>()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structopenscenario__interpreter_1_1syntax_1_1TrafficSignalController" kindref="compound">TrafficSignalController</ref>(<ref refid="structopenscenario__interpreter_1_1syntax_1_1TrafficSignalController" kindref="compound">TrafficSignalController</ref><sp/>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structopenscenario__interpreter_1_1syntax_1_1TrafficSignalController" kindref="compound">TrafficSignalController</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structopenscenario__interpreter_1_1syntax_1_1TrafficSignalController" kindref="compound">TrafficSignalController</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Node&gt;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structopenscenario__interpreter_1_1syntax_1_1TrafficSignalController" kindref="compound">TrafficSignalController</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Node<sp/>&amp;<sp/>node,<sp/><ref refid="classopenscenario__interpreter_1_1Scope" kindref="compound">Scope</ref><sp/>&amp;<sp/>outer_scope)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>:<sp/>name(readAttribute&lt;String&gt;(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>node,<sp/>outer_scope)),</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>readAttribute&lt;Double&gt;(</highlight><highlight class="stringliteral">&quot;delay&quot;</highlight><highlight class="normal">,<sp/>node,<sp/>outer_scope,<sp/>std::numeric_limits&lt;double&gt;::quiet_NaN())),</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>reference(readAttribute&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;reference&quot;</highlight><highlight class="normal">,<sp/>node,<sp/>outer_scope,<sp/>std::string{})),</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>phases(readElements&lt;Phase,<sp/>0&gt;(</highlight><highlight class="stringliteral">&quot;Phase&quot;</highlight><highlight class="normal">,<sp/>node,<sp/>outer_scope)),</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>current_phase(std::begin(phases),<sp/>std::end(phases),<sp/>std::end(phases)),</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>change_to_begin_time(boost::none),</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>current_phase_started_at(std::numeric_limits&lt;decltype(current_phase_started_at)&gt;::min())</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delay<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>THROW_SYNTAX_ERROR(</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TrafficSignalController<sp/>(&quot;</highlight><highlight class="normal">,<sp/>name,<sp/></highlight><highlight class="stringliteral">&quot;):<sp/>delay<sp/>must<sp/>not<sp/>be<sp/>a<sp/>negative<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>std::isnan(delay)<sp/>and<sp/>reference.empty())<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>THROW_SYNTAX_ERROR(</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TrafficSignalController<sp/>(&quot;</highlight><highlight class="normal">,<sp/>name,<sp/></highlight><highlight class="stringliteral">&quot;):<sp/>If<sp/>delay<sp/>is<sp/>set,<sp/>reference<sp/>is<sp/>required&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>reference.empty()<sp/>and<sp/>std::isnan(delay))<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>THROW_SYNTAX_ERROR(</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TrafficSignalController<sp/>&quot;</highlight><highlight class="normal">,<sp/>std::quoted(name),<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>If<sp/>reference<sp/>is<sp/>set,<sp/>delay<sp/>is<sp/>required&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>changePhaseByName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>phase_name)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(phases.begin(),<sp/>phases.end(),<sp/>[&amp;phase_name](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structopenscenario__interpreter_1_1syntax_1_1Phase" kindref="compound">Phase</ref><sp/>&amp;<sp/>phase)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>phase.name<sp/>==<sp/>phase_name;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>phases.end())<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>THROW_SYNTAX_ERROR(</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::quoted(phase_name),<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>declared<sp/>in<sp/>TrafficSignalController<sp/>&quot;</highlight><highlight class="normal">,<sp/>std::quoted(name));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>changePhaseTo(it);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>changePhaseTo(std::list&lt;Phase&gt;::iterator<sp/>next)<sp/>-&gt;<sp/><ref refid="classopenscenario__interpreter_1_1Pointer" kindref="compound">Element</ref></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_time<sp/>=<sp/>getCurrentTime();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next<sp/>==<sp/>phases.begin())<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>observer<sp/>:<sp/>observers)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>observer-&gt;notifyBegin();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>current_phase_started_at<sp/>=<sp/>current_time;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>current_phase<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_phase<sp/>!=<sp/>phases.end()<sp/>?<sp/>(*current_phase).evaluate()<sp/>:<sp/>unspecified;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>currentPhaseExceeded()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_phase<sp/>!=<sp/>phases.end()<sp/>and</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*current_phase).duration<sp/>&lt;=<sp/>(getCurrentTime()<sp/>-<sp/>current_phase_started_at);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>currentPhaseName()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*current_phase).name;<sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>currentPhaseSince()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_phase_started_at;<sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cycleTime()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="168"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::accumulate(</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cbegin(phases),<sp/>std::cend(phases),<sp/>0,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>sum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>phase)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum<sp/>+<sp/>phase.duration;<sp/>});</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>evaluate()</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shouldChangePhaseToBegin())<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>changePhaseTo(phases.begin());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentPhaseExceeded())<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>changePhaseTo(std::next(current_phase));</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unspecified;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>notifyBegin()<sp/>{<sp/>change_to_begin_time<sp/>=<sp/>getCurrentTime()<sp/>+<sp/>delay;<sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shouldChangePhaseToBegin()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reference.empty())<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_phase<sp/>==<sp/>phases.end();<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>current_phase<sp/>haven&apos;t<sp/>been<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(change_to_begin_time.has_value()<sp/>and<sp/>(change_to_begin_time.value()<sp/>&lt;<sp/>getCurrentTime()))<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>change_to_begin_time<sp/>=<sp/>boost::none;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal">};</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>syntax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>openscenario_interpreter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>OPENSCENARIO_INTERPRETER__SYNTAX__TRAFFIC_SIGNAL_CONTROLLER_HPP_</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/syntax/traffic_signal_controller.hpp"/>
  </compounddef>
</doxygen>
